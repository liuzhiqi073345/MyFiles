先明确我所指的PHP工程师，是指毕业工作后，主要以PHP进行WEB系统的开发，没有使用其他语言工作过。工作经验大概在3~4年，普通的WEB系统(百万级访问，千成级数据以内或业务逻辑不是特别复杂)开发起基本得心应手，没有什么问题。但他们会这样的物点：

　　除了PHP不使用其它的语言,可能会点shell 脚本。

　　对PHP的掌握不精(很多PHP手册都没有看完,库除外)

　　知识面比较窄(面对需求，除开使用PHP和mysql ，不知道其它的解决办法)

　　PHP代码以过程为主，认为面向对象的实现太绕，看不懂

　　这些PHPer 在遇到需要高性能，处理高并发，大量数据的项目或业务逻辑比较复杂(系统需要解决多领域业务的问题)时，缺少思路。不能分析问题的本质，技术判断力比较差，对于问题较快能找出临时的解决办法，但常常在不断临时性的解决办法中，系统和自己一步步走向崩溃。那怎么提高自己呢?怎么可以挑战难度更高的系统?

　　更高的挑战在那里?

　　结合我自己的经验，我列出一些具体挑战，让大家先有个感性的认识。

　　高性能系统的挑战在哪里?

　　如何选择WEB服务器?要不要使用fast-cgi 模式

　　要不要使用反向代理服务?选择全内存缓存还是硬盘缓存?

　　是否需要负载均衡?是基于应用层，还是网络层? 如何保证高可靠性?

　　你的PHP代码性能如何，使用优化工具后怎么样? 性能瓶颈在那里? 是否需要写成C的扩展?

　　用户访问有什么特点,是读多还是写多?是否需要读写分离?

　　数据如何存储?写入速度和读出速度如何? 数据增涨访问速读如何变化?

　　如何使用缓存? 怎么样考虑失效?数据的一致性怎么保证?

　　高复杂性系统的挑战在哪里?

　　能否识别业务所对应的领域?是一个还是多个?

　　能否合理对业务进行抽象，在业务规则变化能以很小的代价实现?

　　数据的一致性、安全性可否保证?

　　是否撑握了面向对象的分析和设计的方法

　　当我所列出的问题，你都能肯定的回答，我想在技术上你基本已经可能成为架构师了。如何你还不能回答，你需要在以下几个方向加强。

　　怎么样提高，突破瓶颈

　　如何你还不能回答，你需要在以下几个方向加强：

　　分析你所使用的技术其原理和背后运行的机制，这样可以提高你的技术判断力，提高你技术方案选择的正确性;

　　学习大学期间重要的知识, 操作系统原理，数据结构和算法。知道你以前学习都是为了考试，但现在你需要为自己学习，让自己知其所以然。

　　重新开始学习C语言，虽然你在大学已经学过。这不仅是因为你可能需要写PHP扩展，而且还因为，在做C的应用中，有一个时刻关心性能、内存控制、变量生命周期、数据结构和算法的环境。

　　学习面向对象的分析与设计，它是解决复杂问题的有效的方法。学习抽象，它是解决复杂问题的唯一之道。

　　“这么多的东西怎么学，这得学多久呀” ?

　　如果你努力的话，有较好的规划，估计需要1~2年的时间，怎么学习的问题，我们后续再谈。

　　(注：下面是原文作者左文建分享的学习方法)

　　学习建议

　　如何有效的学习是一个大问题。 自己有些实践但很零散，不好总结。昨天晚上睡觉前，突然想到了RUP的核心，“以架构为中心，用例驱动，迭代开发”，借用这个思想，关于有效的学习的方法，可以这样来表述:

　　以原理、模型或机制为中心，任务驱动，迭代学习

　　有点抽象， 举个例子来说明如何学习。

　　目的： 学习如何提高处理性能。

　　可迭代驱动的任务： 通过IP找到所在地域。

　　这是WEB应用常见的任务，IP数据库是10左右万行的记录。

　　第一次迭代： 不考虑性能的情况下实现功能(通过PHP来实现)

　　因为无法直接通过KEY(IP)进行查找地域，所以直接放到数据或通过关联数组这种简单的方法都是不行的。思路还是先把数据进行排序，然后再进行查找

　　1. 如何通过IP查找? 已序的数据，二分查找是最快的。

　　2. 如何排序?用库函数sort当然 是可以，但是即然是学习，那还是自己实现快速排序吧。

　　学习目标： 排序算法，查找算法

　　PHPer 数据结构和算法基础比较差，平时也没有这方面的任务，自己也不学习，因此这方面的知识很缺乏。但是，编程解决的问题，最终都会归结到数据结构和对这种数据结构操作的算法。如果数据结构算法常在心中，那遇到问题就能清晰认识到它内在的结构，解决方法就会自然产生。

　　第二次迭代：优化数据的加载与排序

　　如果做到第一步，那基本上还是不可用，因为数据每次都需要的加载和排序，这样太耗时间。 解决的思路是，数据一次加载排序后，放到每个PHP进程能访问到的地方。

　　放到memcache 这是大家容易想到问题。其实放到共享内存(EA等加速器都支持)中是更快的方式，因为memcache还多了网络操作。 数据是整体放入到共享内存，还是分块放入，如何测试性能? 如何分析瓶颈所在(xdebug)? 在这些问题的驱动下你会学习到

　　学习目标： 检测、定位、优化PHP性能的方法; PHP实现结构对性能的影响。

　　第三次迭代： 编写PHP的扩展

　　性能还是上不去，不得不进入C/C++的世界了，不过从此你将不只是PHPer 而服务端的全能型工程师，当然这对没有做过C/C++的同学挑战是巨大的。 我这里无法再简单来说如何学习C/C++ ，可以参看 《PHP程序员学习C++》

　　学习目标：C/C++的学习，PHP扩展的编写

　　怎么确定需要学习的机制和原理呢? 怎么找到驱动学习任务呢?

　　我对需要学习的东西，都没有什么概念，怎么回答以上的两个问题?

　　从这个技术的定位来找出需要学习的重点，即它怎么做到(机制)的和它为什么能这样做到 (模型或原理)

　　列出这个技术最常见的应用，做为学习的任务，从简到难进行实践。

　　假如我需要学习Javascript ，我对于HTML，CSS有点感性认识

　　首要我了解到，JS 是WEB领域的动态语言，主要解决网页的动态交互的。

　　那我要学习的要点如下：

　　JS如何与HTML 进行交互 (机制)

　　JS的动态特性在那里，与其它动态语言有何区别?(语言模型)

　　如果完全自学，找到需要学习的要点(机制、模型、原理) 设定学习任务的确不是那么容易把握。如果找到一个有经验的人来指导你或加一个学习型的团队，那学习的速度的确会大大提高。

　　最后，我想说的是： PHP因为简单而使用，但不能因为它的简单而限制我们成长!