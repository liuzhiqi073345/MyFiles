如何理解“针对接口编程，而不是针对实现编程”？
2011-02-24 21:09 sohai | 分类：其他编程语言 | 浏览1382次

这是，在听微软的面向对象设计模式与原则一棵的，一句话，理解不深刻，希望网友能详细讲讲，好理解为原则，举例说明也好

分享到：
2011-02-25 15:24 提问者采纳

通过接口来调用一个类及其方法，而不是直接建立类实体来调用类。
比如将来你要把这个被调用的类换成一个别的实现类时，你就不用去把调用过它的类一个个改掉了，因为它们调的是接口，接口没变，在配置里把接口的实现类换成新的类，就全部都替换掉了
这就是解耦，提高可维护性

追问

理解一点点，能不能在详细点，是不是涉及到了工厂模式(我只是听说过)啊

回答

要说清楚工厂模式的话这里版面就不太够了，你可以找下关于设计模式的书或教程什么的，基本上第一个要学的设计模式就是工厂模式，现在有很多教程都能把设计模式说得很简单易懂。

这样做有利于实现工厂模式，但也并不是完整的工厂模式。
反正接口就像个通用遥控器，现在是用来开这台电视机，如果换一台电视机，遥控器不用换，使用方法不变。
没有遥控器，你就得重新学新电视机的按钮用法。

追问

呵呵，你回答的好神速啊，你能否举个简单的Demo,来解释 “针对接口编程，而不是针对实现编程” 这句话呢，感激不尽，呵呵

回答

interface 动物 {
    void 叫();
}

class 狗 implements 动物 {
   void 叫() {
      System.out.println("汪");
   }
}

class 猫 implements 动物 {
  void 叫() {
      System.out.println("喵");
   }
}

class test{
  private 动物 我的宠物;

  public static void main() {
    我的宠物.叫();
  }
}

现在你可以把我的宠物随便换成狗类或猫类都行了，main方法不用改。
针对实现编程就是
new 狗();
狗.叫();
换了猫再改一次main方法

