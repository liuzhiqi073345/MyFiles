 SVN的标准目录结构：trunk、branches、tags

原文链接：http://techlife.blog.51cto.com/212583/223704/

我们在一些著名开源项目的版本库中，通常可以看到trunk, branches, tags等三个目录。由于SVN固有的特点，目录在SVN中并没有特别的意义，但是这三个目录却在大多数开源项目中存在，这是因为这三个目录反映了软件开发的通常模式。

trunk是主分支，是日常开发进行的地方。

branches是分支。一些阶段性的release版本，这些版本是可以继续进行开发和维护的，则放在branches目录中。又比如为不同用户客制化的版本，也可以放在分支中进行开发。

tags目录一般是只读的，这里存储阶段性的发布版本，只是作为一个里程碑的版本进行存档。

比如一个项目有main.cpp, common.h两个文件，假设目前在开发的是最新的3.0版本，而且1.0/2.0版本也在进行维护，那么项目树将类似如下样子：

project
  |
  +-- trunk
  +     |
  +     +----- main.cpp  (3.0版本的最新文件）
  +     +----- common.h
  +
  +-- branches
  +     |
  +     +-- r1.0
  +     +     |
  +     +     +---- main.cpp （1.x版本的最新文件）
  +     +     +---- common.h 
  +     +
  +     +-- r2.0
  +           |
  +           +---- main.cpp （2.x版本的最新文件）
  +           +---- common.h
  +      
  +-- tags   (此目录只读)
        |
        +-- r1.0
        +     |
        +     +---- main.cpp （1.0版本的发布文件）
        +     +---- common.h 
        +
        +-- r1.1
        +     |
        +     +---- main.cpp （1.1版本的发布文件）
        +     +---- common.h
        +
        +-- r1.2
        +     |
        +     +---- main.cpp （1.2版本的发布文件）
        +     +---- common.h 
        +
        +-- r1.3
        +     |
        +     +---- main.cpp （1.3版本的发布文件）
        +     +---- common.h
        +
        +-- r2.0
        +     |
        +     +---- main.cpp （2.0版本的发布文件）
        +     +---- common.h 
        +
        +-- r2.1
              |
              +---- main.cpp （2.1版本的发布文件）
              +---- common.h


要使用这样的文件夹结构，在建立项目版本库时，可首先建好项目文件夹，并在其中建立trunk, branches, tags三个空的子目录，再将项目文件夹连同这三个子目录一起导入版本库。

这样在trunk中开始进行开发，当需要建立branch或tag时，使用SVN的copy操作进行。

其中tags目录需要只读，可以使用SVN中的authz文件控制该目录的访问权限为只读。