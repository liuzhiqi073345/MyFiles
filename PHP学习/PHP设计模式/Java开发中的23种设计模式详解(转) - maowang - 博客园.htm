<!DOCTYPE html>
<html lang="zh-cn"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="utf-8">
<title>Java开发中的23种设计模式详解(转) - maowang - 博客园</title>
<link type="text/css" rel="stylesheet" href="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/blog-common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/bundle-darkgreentrip.css">
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/maowang1991/rss">
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/maowang1991/rsd.xml">
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/maowang1991/wlwmanifest.xml">
<script src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'maowang1991', cb_enable_mathjax=false;</script>
<script src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/blog-common.js" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/maowang1991/"><img id="blogLogo" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/logo.gif" alt="返回主页"></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/maowang1991/">maowang</a></h1>
<h2>I am a slow walker,but I never walk backwards！</h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="MyLinks1_HomeLink" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li><a id="MyLinks1_MyHomeLink" class="menu" href="http://www.cnblogs.com/maowang1991/">首页</a></li>
<li><a id="MyLinks1_NewPostLink" class="menu" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="MyLinks1_ContactLink" class="menu" rel="nofollow" href="http://msg.cnblogs.com/send/maowang">联系</a></li>
<li><a id="MyLinks1_Syndication" class="menu" href="http://www.cnblogs.com/maowang1991/rss">订阅</a>
<!--<a id="MyLinks1_XMLLink" class="aHeaderXML" href="http://www.cnblogs.com/maowang1991/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="MyLinks1_Admin" class="menu" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			
<!--done-->
随笔- 125&nbsp;
文章- 0&nbsp;
评论- 99&nbsp;

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html">Java开发中的23种设计模式详解(转)</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><p><strong><span>设计模式（Design Patterns）</span></strong></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
 ——可复用面向对象软件的基础</p>
<p>设计模式（Design 
pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代
码可靠性。 
毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理的运用
设计模式可以完美的解决很多问题，每种模式在现在中都有相应的原理来与之对应，每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决
方案，这也是它能被广泛应用的原因。本章系<span><strong>Java之美[从菜鸟到高手演变]系列</strong></span>之设计模式，我们会以理论与实践相结合的方式来进行本章的学习，希望广大程序爱好者，学好设计模式，做一个优秀的软件工程师！</p>
<p><span><strong>企业级项目实战(带源码)地址</strong></span><span><strong>：</strong></span><a href="http://zz563143188.iteye.com/blog/1825168" target="_blank">http://zz563143188.iteye.com/blog/1825168</a></p>
<div><strong><span>23种模式java实现源码下载地址</span></strong>&nbsp;<a title="http://pan.baidu.com/share/link?shareid=372668&amp;uk=4076915866" href="http://pan.baidu.com/share/link?shareid=372668&amp;uk=4076915866#dir/path=%2F%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6" target="_blank">http://pan.baidu.com/share/link?shareid=372668&amp;uk=4076915866#dir/path=%2F%E5%AD%A6%E4%B9%A0%E6%96%87%E4%BB%B6</a>&nbsp;</div>
<p><span><strong>一、设计模式的分类</strong></span></p>
<p>总体来说设计模式分为三大类：</p>
<p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>
<p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p>
<p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>
<p>其实还有两类：并发型模式和线程池模式。用一个图片来整体描述一下：</p>
<p><img class="magplus" title="点击查看原始大小图片" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/57a92d42-4d84-3aa9-a8b9-63a0b02c2c36.jpg" alt="" width="700" height="840"></p>
<p>&nbsp;</p>
<p><span><strong>二、设计模式的六大原则</strong></span></p>
<p><span><strong>1、开闭原则（Open Close Principle）</strong></span></p>
<p>开闭原则就是说<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
<p><span><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></span></p>
<p>里氏代换原则(Liskov Substitution Principle LSP)面向对象设计的基本原则之一。 
里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 
LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里
氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现
抽象化的具体步骤的规范。—— From Baidu 百科</p>
<p><span><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></span></p>
<p>这个是开闭原则的基础，具体内容：真对接口编程，依赖于抽象而不依赖于具体。</p>
<p><span><strong>4、接口隔离原则（Interface Segregation Principle）</strong></span></p>
<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。</p>
<p><span><strong>5、迪米特法则（最少知道原则）（Demeter Principle）</strong></span></p>
<p>为什么叫最少知道原则，就是说：一个实体应当尽量少的与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
<p><span><strong>6、合成复用原则（Composite Reuse Principle）</strong></span></p>
<p>原则是尽量使用合成/聚合的方式，而不是使用继承。</p>
<p><span><strong>三、Java的23中设计模式</strong></span></p>
<p>从这一块开始，我们详细介绍Java中23种设计模式的概念，应用场景等情况，并结合他们的特点及设计模式的原则进行分析。</p>
<p><strong><span>1、工厂方法模式（Factory Method）</span></strong></p>
<p>工厂方法模式分为三种：</p>
<p><strong><em>11、普通工厂模式</em></strong>，就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。首先看下关系图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/421a1a3f-6777-3bca-85d7-00fc60c1ae8b.png" alt="" width="657" height="352"></p>
<p>举例如下：（我们举一个发送邮件和短信的例子）</p>
<p>首先，创建二者的共同接口：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Sender&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;Send();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>其次，创建实现类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MailSender&nbsp;</span><span>implements</span><span>&nbsp;Sender&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;Send()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"this&nbsp;is&nbsp;mailsender!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SmsSender&nbsp;</span><span>implements</span><span>&nbsp;Sender&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;Send()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"this&nbsp;is&nbsp;sms&nbsp;sender!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>最后，建工厂类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SendFactory&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Sender&nbsp;produce(String&nbsp;type)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(</span><span>"mail"</span><span>.equals(type))&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>new</span><span>&nbsp;MailSender();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span>else</span><span>&nbsp;</span><span>if</span><span>&nbsp;(</span><span>"sms"</span><span>.equals(type))&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>new</span><span>&nbsp;SmsSender();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span>else</span><span>&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"请输入正确的类型!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>我们来测试下：</p>
<div><ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;FactoryTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendFactory&nbsp;factory&nbsp;=&nbsp;<span>new</span><span>&nbsp;SendFactory();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sender&nbsp;sender&nbsp;=&nbsp;factory.produce(<span>"sms"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sender.Send();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>输出：this is sms sender!</p>
<p><em><strong>22、多个工厂方法模式</strong></em>，是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。关系图：</p>
<p><img class="magplus" title="点击查看原始大小图片" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/84673ccf-ef89-3774-b5cf-6d2523cd03e5.jpg" alt="" width="700" height="313"></p>
<p>将上面的代码做下修改，改动下SendFactory类就行，如下：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SendFactory&nbsp;{ &nbsp;</span></div>
<div><span>&nbsp; &nbsp;</span><span>public</span><span>&nbsp;Sender&nbsp;produceMail(){ &nbsp;</span></div>
</div>
<ol>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>new</span><span>&nbsp;MailSender();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Sender&nbsp;produceSms(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>new</span><span>&nbsp;SmsSender();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>测试类如下：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;FactoryTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SendFactory&nbsp;factory&nbsp;=&nbsp;<span>new</span><span>&nbsp;SendFactory();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sender&nbsp;sender&nbsp;=&nbsp;factory.produceMail();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sender.Send();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>输出：this is mailsender!</p>
<p><em><strong>33、静态工厂方法模式</strong></em>，将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SendFactory&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;Sender&nbsp;produceMail(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>new</span><span>&nbsp;MailSender();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;Sender&nbsp;produceSms(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>new</span><span>&nbsp;SmsSender();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;FactoryTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sender&nbsp;sender&nbsp;=&nbsp;SendFactory.produceMail();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sender.Send();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>输出：this is mailsender!</p>
<p>总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传
入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。</p>
<p><strong><span>2、抽象工厂模式（Abstract Factory）</span></strong></p>
<p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，
有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。因为抽象
工厂不太好理解，我们先看看图，然后就和代码，就比较容易理解。</p>
<p><img class="magplus" title="点击查看原始大小图片" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/34a0f8de-16e0-3cd5-9f69-257fcb2be742.jpg" alt="" width="700" height="295"></p>
<p>请看例子：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Sender&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;Send();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>两个实现类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MailSender&nbsp;</span><span>implements</span><span>&nbsp;Sender&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;Send()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"this&nbsp;is&nbsp;mailsender!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SmsSender&nbsp;</span><span>implements</span><span>&nbsp;Sender&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;Send()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"this&nbsp;is&nbsp;sms&nbsp;sender!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>两个工厂类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SendMailFactory&nbsp;</span><span>implements</span><span>&nbsp;Provider&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Sender&nbsp;produce(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>new</span><span>&nbsp;MailSender();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SendSmsFactory&nbsp;</span><span>implements</span><span>&nbsp;Provider{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Sender&nbsp;produce()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>new</span><span>&nbsp;SmsSender();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>在提供一个接口：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Provider&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Sender&nbsp;produce();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Provider&nbsp;provider&nbsp;=&nbsp;<span>new</span><span>&nbsp;SendMailFactory();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sender&nbsp;sender&nbsp;=&nbsp;provider.produce();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sender.Send();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做，拓展性较好！</p>
<p><strong><span>3、单例模式（<strong>Singleton</strong>）</span></strong></p>
<p><span>单例对象（Singleton）是一种常用的设计模式。在Java应用中，单例对象能保证在一个JVM中，该对象只有一个实例存在。这样的模式有几个好处：</span></p>
<p><span>1、某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</span></p>
<p><span>2、省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</span></p>
<p><span>3、有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</span></p>
<p>首先我们写一个简单的单例类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>
</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Singleton&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;Singleton&nbsp;instance&nbsp;=&nbsp;</span><span>null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;私有构造方法，防止被实例化&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Singleton()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;静态工程方法，创建实例&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;Singleton&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(instance&nbsp;==&nbsp;</span><span>null</span><span>)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;<span>new</span><span>&nbsp;Singleton();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;instance;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;如果该对象被用于序列化，可以保证对象在序列化前后保持一致&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;readResolve()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;instance;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p><br>这个类可以满足基本要求，但是，像这样毫无线程安全保护的类，如果我们把它放入多线程的环境下，肯定就会出现问题了，如何解决？我们首先会想到对getInstance方法加synchronized关键字，如下：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>synchronized</span><span>&nbsp;Singleton&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(instance&nbsp;==&nbsp;</span><span>null</span><span>)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;<span>new</span><span>&nbsp;Singleton();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;instance;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>

</ol></div>
<p>但是，synchronized关键字锁住的是这个对象，这样的用法，在性能上会有所下降，因为每次调用getInstance()，都要对对象上锁，事实上，只有在第一次创建对象的时候需要加锁，之后就不需要了，所以，这个地方需要改进。我们改成下面这个：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;Singleton&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(instance&nbsp;==&nbsp;</span><span>null</span><span>)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>synchronized</span><span>&nbsp;(instance)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(instance&nbsp;==&nbsp;</span><span>null</span><span>)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;<span>new</span><span>&nbsp;Singleton();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;instance;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>

</ol></div>
<p>似乎解决了之前提到的问题，将synchronized关键字加在了内部，也就是说当调用的时候是不需要加锁的，只有在instance为
null，并创建对象的时候才需要加锁，性能有一定的提升。但是，这样的情况，还是有可能有问题的，看下面的情况：在Java指令中创建对象和赋值操作是
分开进行的，也就是说instance = new 
Singleton();语句是分两步执行的。但是JVM并不保证这两个操作的先后顺序，也就是说有可能JVM会为新的Singleton实例分配空间，
然后直接赋值给instance成员，然后再去初始化这个Singleton实例。这样就可能出错了，我们以A、B两个线程为例：</p>
<p>a&gt;A、B线程同时进入了第一个if判断</p>
<p>b&gt;A首先进入synchronized块，由于instance为null，所以它执行instance = new Singleton();</p>
<p>c&gt;由于JVM内部的优化机制，JVM先画出了一些分配给Singleton实例的空白内存，并赋值给instance成员（注意此时JVM没有开始初始化这个实例），然后A离开了synchronized块。</p>
<p>d&gt;B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将结果返回给调用该方法的程序。</p>
<p>e&gt;此时B线程打算使用Singleton实例，却发现它没有被初始化，于是错误发生了。</p>
<p>所以程序还是有可能发生错误，其实程序在运行过程是很复杂的，从这点我们就可以看出，尤其是在写多线程环境下的程序更有难度，有挑战性。我们对该程序做进一步优化：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>

</div>
<ol>
<li><span><span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>class</span><span>&nbsp;SingletonFactory{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;Singleton&nbsp;instance&nbsp;=&nbsp;</span><span>new</span><span>&nbsp;Singleton();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;Singleton&nbsp;getInstance(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;SingletonFactory.instance;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;</span></li>

</ol></div>
<p>实际情况是，单例模式使用内部类来维护单例的实现，JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一
次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕，这样我
们就不用担心上面的问题。同时该方法也只会在第一次调用的时候使用互斥机制，这样就解决了低性能问题。这样我们暂时总结一个完美的单例模式：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Singleton&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;私有构造方法，防止被实例化&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Singleton()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;此处使用一个内部类来维护单例&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>class</span><span>&nbsp;SingletonFactory&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;Singleton&nbsp;instance&nbsp;=&nbsp;</span><span>new</span><span>&nbsp;Singleton();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;获取实例&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;Singleton&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;SingletonFactory.instance;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;如果该对象被用于序列化，可以保证对象在序列化前后保持一致&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;readResolve()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;getInstance();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>其实说它完美，也不一定，如果在构造函数中抛出异常，实例将永远得不到创建，也会出错。所以说，十分完美的东西是没有的，我们只能根据实际情况，选
择最适合自己应用场景的实现方法。也有人这样实现：因为我们只需要在创建类的时候进行同步，所以只要将创建和getInstance()分开，单独为创建
加synchronized关键字，也是可以的：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SingletonTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;SingletonTest&nbsp;instance&nbsp;=&nbsp;</span><span>null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;SingletonTest()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>synchronized</span><span>&nbsp;</span><span>void</span><span>&nbsp;syncInit()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(instance&nbsp;==&nbsp;</span><span>null</span><span>)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;<span>new</span><span>&nbsp;SingletonTest();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;SingletonTest&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(instance&nbsp;==&nbsp;</span><span>null</span><span>)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;syncInit();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;instance;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>考虑性能的话，整个程序只需创建一次实例，所以性能也不会有什么影响。</p>
<p><strong><span>补充：</span><span>采用"影子实例"的办法为单例对象的属性同步更新</span></strong></p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SingletonTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;SingletonTest&nbsp;instance&nbsp;=&nbsp;</span><span>null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Vector&nbsp;properties&nbsp;=&nbsp;</span><span>null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Vector&nbsp;getProperties()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;properties;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;SingletonTest()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>synchronized</span><span>&nbsp;</span><span>void</span><span>&nbsp;syncInit()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(instance&nbsp;==&nbsp;</span><span>null</span><span>)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;<span>new</span><span>&nbsp;SingletonTest();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;SingletonTest&nbsp;getInstance()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(instance&nbsp;==&nbsp;</span><span>null</span><span>)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;syncInit();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;instance;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;updateProperties()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SingletonTest&nbsp;shadow&nbsp;=&nbsp;<span>new</span><span>&nbsp;SingletonTest();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;properties&nbsp;=&nbsp;shadow.getProperties();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>通过单例模式的学习告诉我们：</p>
<p>1、单例模式理解起来简单，但是具体实现起来还是有一定的难度。</p>
<p>2、synchronized关键字锁定的是对象，在用的时候，一定要在恰当的地方使用（注意需要使用锁的对象和过程，可能有的时候并不是整个对象及整个过程都需要锁）。</p>
<p>到这儿，单例模式基本已经讲完了，结尾处，笔者突然想到另一个问题，就是采用类的静态方法，实现单例模式的效果，也是可行的，此处二者有什么不同？</p>
<p>首先，静态类不能实现接口。（从类的角度说是可以的，但是那样就破坏了静态了。因为接口中不允许有static修饰的方法，所以即使实现了也是非静态的）</p>
<p>其次，单例可以被延迟初始化，静态类一般在第一次加载是初始化。之所以延迟加载，是因为有些类比较庞大，所以延迟加载有助于提升性能。</p>
<p>再次，单例类可以被继承，他的方法可以被覆写。但是静态类内部方法都是static，无法被覆写。</p>
<p>最后一点，单例类比较灵活，毕竟从实现上只是一个普通的Java类，只要满足单例的基本需求，你可以在里面随心所欲的实现一些其它功能，但是静态类
不行。从上面这些概括中，基本可以看出二者的区别，但是，从另一方面讲，我们上面最后实现的那个单例模式，内部就是用一个静态类来实现的，所以，二者有很
大的关联，只是我们考虑问题的层面不同罢了。两种思想的结合，才能造就出完美的解决方案，就像HashMap采用数组+链表来实现一样，其实生活中很多事
情都是这样，单用不同的方法来处理问题，总是有优点也有缺点，最完美的方法是，结合各个方法的优点，才能最好的解决问题！</p>
<p><strong><span>4、建造者模式（Builder）</span></strong></p>
<p>工厂类模式提供的是创建单个类的模式，而建造者模式则是将各种产品集中起来进行管理，用来创建复合对象，所谓复合对象就是指某个类具有不同的属性，其实建造者模式就是前面抽象工厂模式和最后的Test结合起来得到的。我们看一下代码：</p>
<p>还和前面一样，一个Sender接口，两个实现类MailSender和SmsSender。最后，建造者类如下：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Builder&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;List&lt;Sender&gt;&nbsp;list&nbsp;=&nbsp;</span><span>new</span><span>&nbsp;ArrayList&lt;Sender&gt;();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;produceMailSender(</span><span>int</span><span>&nbsp;count){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>for</span><span>(</span><span>int</span><span>&nbsp;i=</span><span>0</span><span>;&nbsp;i&lt;count;&nbsp;i++){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.add(<span>new</span><span>&nbsp;MailSender());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;produceSmsSender(</span><span>int</span><span>&nbsp;count){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>for</span><span>(</span><span>int</span><span>&nbsp;i=</span><span>0</span><span>;&nbsp;i&lt;count;&nbsp;i++){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.add(<span>new</span><span>&nbsp;SmsSender());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Builder&nbsp;builder&nbsp;=&nbsp;<span>new</span><span>&nbsp;Builder();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;builder.produceMailSender(<span>10</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与工程模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</p>
<p><strong><span>5、原型模式（Prototype）</span></strong></p>
<p>原型模式虽然是创建型的模式，但是与工程模式没有关系，从名字即可看出，该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。本小结会通过对象的复制，进行讲解。在Java中，复制对象是通过clone()实现的，先创建一个原型类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Prototype&nbsp;</span><span>implements</span><span>&nbsp;Cloneable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;clone()&nbsp;</span><span>throws</span><span>&nbsp;CloneNotSupportedException&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prototype&nbsp;proto&nbsp;=&nbsp;(Prototype)&nbsp;<span>super</span><span>.clone();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;proto;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>很简单，一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口
是个空接口，你可以任意定义实现类的方法名，如cloneA或者cloneB，因为此处的重点是super.clone()这句
话，super.clone()调用的是Object的clone()方法，而在Object类中，clone()是native的，具体怎么实现，我会
在另一篇文章中，关于解读Java中本地方法的调用，此处不再深究。在这儿，我将结合对象的浅复制和深复制来说一下，首先需要了解对象深、浅复制的概念：</p>
<p>浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。</p>
<p>深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。</p>
<p>此处，写一个深浅复制的例子：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8194653">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8194653">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Prototype&nbsp;</span><span>implements</span><span>&nbsp;Cloneable,&nbsp;Serializable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>final</span><span>&nbsp;</span><span>long</span><span>&nbsp;serialVersionUID&nbsp;=&nbsp;1L;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;String&nbsp;string;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;SerializableObject&nbsp;obj;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;浅复制&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;clone()&nbsp;</span><span>throws</span><span>&nbsp;CloneNotSupportedException&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Prototype&nbsp;proto&nbsp;=&nbsp;(Prototype)&nbsp;<span>super</span><span>.clone();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;proto;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;深复制&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;deepClone()&nbsp;</span><span>throws</span><span>&nbsp;IOException,&nbsp;ClassNotFoundException&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;写入当前对象的二进制流&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ByteArrayOutputStream&nbsp;bos&nbsp;=&nbsp;<span>new</span><span>&nbsp;ByteArrayOutputStream();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectOutputStream&nbsp;oos&nbsp;=&nbsp;<span>new</span><span>&nbsp;ObjectOutputStream(bos);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oos.writeObject(<span>this</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;读出二进制流产生的新对象&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ByteArrayInputStream&nbsp;bis&nbsp;=&nbsp;<span>new</span><span>&nbsp;ByteArrayInputStream(bos.toByteArray());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectInputStream&nbsp;ois&nbsp;=&nbsp;<span>new</span><span>&nbsp;ObjectInputStream(bis);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;ois.readObject();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;String&nbsp;getString()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;string;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setString(String&nbsp;string)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.string&nbsp;=&nbsp;string;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;SerializableObject&nbsp;getObj()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;obj;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setObj(SerializableObject&nbsp;obj)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.obj&nbsp;=&nbsp;obj;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span>class</span><span>&nbsp;SerializableObject&nbsp;</span><span>implements</span><span>&nbsp;Serializable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>final</span><span>&nbsp;</span><span>long</span><span>&nbsp;serialVersionUID&nbsp;=&nbsp;1L;&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>&nbsp;</div>
<div>要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。</div>
<div>
<p>我们接着讨论设计模式，上篇文章我讲完了5种创建型模式，这章开始，我将讲下7种结构型模式：适配器模式、装饰模式、代理模式、外观模式、桥接模式、组合模式、享元模式。其中对象的适配器模式是各种模式的起源，我们看下面的图：</p>
<p><img class="magplus" title="点击查看原始大小图片" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/e28698b9-994e-3fa8-8810-16f30e7cf3e3.jpg" alt="" width="700" height="371"></p>
<p>&nbsp;适配器模式将某个类的接口转换成客户端期望的另一个接口表示，目的是消除由于接口不匹配所造成的类的兼容性问题。主要分为三类：类的适配器模式、对象的适配器模式、接口的适配器模式。首先，我们来看看<strong><span>类的适配器模式</span></strong>，先看类图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/6b2d13aa-7cc7-3e98-9764-bdcb2c64f795.jpg" alt=""></p>
<p>核心思想就是：有一个Source类，拥有一个方法，待适配，目标接口时Targetable，通过Adapter类，将Source的功能扩展到Targetable里，看代码：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Source&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method1()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"this&nbsp;is&nbsp;original&nbsp;method!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Targetable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;与原类中的方法相同&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method1();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;新类的方法&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method2();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Adapter&nbsp;</span><span>extends</span><span>&nbsp;Source&nbsp;</span><span>implements</span><span>&nbsp;Targetable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method2()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"this&nbsp;is&nbsp;the&nbsp;targetable&nbsp;method!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>Adapter类继承Source类，实现Targetable接口，下面是测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;AdapterTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Targetable&nbsp;target&nbsp;=&nbsp;<span>new</span><span>&nbsp;Adapter();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.method1();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.method2();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出：</p>
<p>this is original method!<br>this is the targetable method!</p>
<p>这样Targetable接口的实现类就具有了Source类的功能。</p>
<p><strong><span>对象的适配器模式</span></strong></p>
<p>基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。看图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/0aabe35b-5b79-3ead-838f-9d4b6fbd774d.jpg" alt=""></p>
<p>&nbsp;</p>
<p>只需要修改Adapter类的源码即可：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Wrapper&nbsp;</span><span>implements</span><span>&nbsp;Targetable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Source&nbsp;source;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Wrapper(Source&nbsp;source){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>super</span><span>();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.source&nbsp;=&nbsp;source;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method2()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"this&nbsp;is&nbsp;the&nbsp;targetable&nbsp;method!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method1()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source.method1();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;AdapterTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Source&nbsp;source&nbsp;=&nbsp;<span>new</span><span>&nbsp;Source();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Targetable&nbsp;target&nbsp;=&nbsp;<span>new</span><span>&nbsp;Wrapper(source);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.method1();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.method2();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出与第一种一样，只是适配的方法不同而已。</p>
<p>第三种适配器模式是<strong><span>接口的适配器模式</span></strong>，接口的适配器是这样的：有时我们写的一个接口
中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，
此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽
象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。看一下类图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/a604fca8-e0c6-3e4e-b00a-49da21595b4e.jpg" alt=""></p>
<p>这个很好理解，在实际开发中，我们也常会遇到这种接口中定义了太多的方法，以致于有时我们在一些实现类中并不是都需要。看代码：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Sourceable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method1();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method2();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>抽象类Wrapper2：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>abstract</span><span>&nbsp;</span><span>class</span><span>&nbsp;Wrapper2&nbsp;</span><span>implements</span><span>&nbsp;Sourceable{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method1(){}&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method2(){}&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SourceSub1&nbsp;</span><span>extends</span><span>&nbsp;Wrapper2&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method1(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"the&nbsp;sourceable&nbsp;interface's&nbsp;first&nbsp;Sub1!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SourceSub2&nbsp;</span><span>extends</span><span>&nbsp;Wrapper2&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method2(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"the&nbsp;sourceable&nbsp;interface's&nbsp;second&nbsp;Sub2!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;WrapperTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sourceable&nbsp;source1&nbsp;=&nbsp;<span>new</span><span>&nbsp;SourceSub1();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sourceable&nbsp;source2&nbsp;=&nbsp;<span>new</span><span>&nbsp;SourceSub2();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source1.method1();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source1.method2();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source2.method1();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source2.method2();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>测试输出：</p>
<p>the sourceable interface's first Sub1!<br>the sourceable interface's second Sub2!</p>
<p>达到了我们的效果！</p>
<p>&nbsp;讲了这么多，总结一下三种适配器模式的应用场景：</p>
<p>类的适配器模式：当希望将<strong><span>一个类</span></strong>转换成满足<strong><span>另一个新接口</span></strong>的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。</p>
<p>对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Wrapper类，持有原类的一个实例，在Wrapper类的方法中，调用实例的方法就行。</p>
<p>接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。</p>
<p><strong><span>7、装饰模式（Decorator）</span></strong></p>
<p>顾名思义，装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例，关系图如下：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/e1b8b6a3-0150-31ae-8f77-7c3d888b6f80.jpg" alt="" width="382" height="228"></p>
<p>Source类是被装饰类，Decorator类是一个装饰类，可以为Source类动态的添加一些功能，代码如下：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Sourceable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Source&nbsp;</span><span>implements</span><span>&nbsp;Sourceable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"the&nbsp;original&nbsp;method!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Decorator&nbsp;</span><span>implements</span><span>&nbsp;Sourceable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Sourceable&nbsp;source;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Decorator(Sourceable&nbsp;source){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>super</span><span>();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.source&nbsp;=&nbsp;source;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"before&nbsp;decorator!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source.method();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"after&nbsp;decorator!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;DecoratorTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sourceable&nbsp;source&nbsp;=&nbsp;<span>new</span><span>&nbsp;Source();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sourceable&nbsp;obj&nbsp;=&nbsp;<span>new</span><span>&nbsp;Decorator(source);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.method();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出：</p>
<p>before decorator!<br>the original method!<br>after decorator!</p>
<p>装饰器模式的应用场景：</p>
<p>1、需要扩展一个类的功能。</p>
<p>2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）</p>
<p>缺点：产生过多相似的对象，不易排错！</p>
<p><span><strong>8、代理模式（Proxy）</strong></span></p>
<p>其实每个模式名称就表明了该模式的作用，代理模式就是多一个代理类出来，替原对象进行一些操作，比如我们在租房子的时候回去找中介，为什么呢？因为
你对该地区房屋的信息掌握的不够全面，希望找一个更熟悉的人去帮你做，此处的代理就是这个意思。再如我们有的时候打官司，我们需要请律师，因为律师在法律
方面有专长，可以替我们进行操作，表达我们的想法。先来看看关系图：<img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/ea094ad9-efc5-337d-a8e8-ce9223511144.jpg" alt="" width="462" height="226"></p>
<p>&nbsp;</p>
<p>根据上文的阐述，代理模式就比较容易的理解了，我们看下代码：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Sourceable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Source&nbsp;</span><span>implements</span><span>&nbsp;Sourceable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"the&nbsp;original&nbsp;method!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Proxy&nbsp;</span><span>implements</span><span>&nbsp;Sourceable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Source&nbsp;source;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Proxy(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>super</span><span>();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.source&nbsp;=&nbsp;</span><span>new</span><span>&nbsp;Source();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;before();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source.method();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;atfer();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>void</span><span>&nbsp;atfer()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"after&nbsp;proxy!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>void</span><span>&nbsp;before()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"before&nbsp;proxy!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;ProxyTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sourceable&nbsp;source&nbsp;=&nbsp;<span>new</span><span>&nbsp;Proxy();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source.method();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出：</p>
<p>before proxy!<br>the original method!<br>after proxy!</p>
<p>代理模式的应用场景：</p>
<p>如果已有的方法在使用的时候需要对原有的方法进行改进，此时有两种办法：</p>
<p>1、修改原有的方法来适应。这样违反了“对扩展开放，对修改关闭”的原则。</p>
<p>2、就是采用一个代理类调用原有的方法，且对产生的结果进行控制。这种方法就是代理模式。</p>
<p>使用代理模式，可以将功能划分的更加清晰，有助于后期维护！</p>
<p><strong><span>9、外观模式（Facade）</span></strong></p>
<p>外观模式是为了解决类与类之家的依赖关系的，像spring一样，可以将类和类之间的关系配置到配置文件中，而外观模式就是将他们的关系放在一个Facade类中，降低了类类之间的耦合度，该模式中没有涉及到接口，看下类图：（我们以一个计算机的启动过程为例）</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/eebe2103-6ced-35f2-8664-3a2e8a557f81.jpg" alt="" width="544" height="294"></p>
<p>我们先看下实现类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;CPU&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;startup(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"cpu&nbsp;startup!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;shutdown(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"cpu&nbsp;shutdown!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Memory&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;startup(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"memory&nbsp;startup!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;shutdown(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"memory&nbsp;shutdown!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Disk&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;startup(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"disk&nbsp;startup!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;shutdown(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"disk&nbsp;shutdown!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Computer&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;CPU&nbsp;cpu;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Memory&nbsp;memory;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Disk&nbsp;disk;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Computer(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cpu&nbsp;=&nbsp;<span>new</span><span>&nbsp;CPU();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memory&nbsp;=&nbsp;<span>new</span><span>&nbsp;Memory();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disk&nbsp;=&nbsp;<span>new</span><span>&nbsp;Disk();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;startup(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"start&nbsp;the&nbsp;computer!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cpu.startup();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memory.startup();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disk.startup();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"start&nbsp;computer&nbsp;finished!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;shutdown(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"begin&nbsp;to&nbsp;close&nbsp;the&nbsp;computer!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cpu.shutdown();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memory.shutdown();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;disk.shutdown();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"computer&nbsp;closed!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>User类如下：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;User&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Computer&nbsp;computer&nbsp;=&nbsp;<span>new</span><span>&nbsp;Computer();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;computer.startup();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;computer.shutdown();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出：</p>
<p>start the computer!<br>cpu startup!<br>memory startup!<br>disk startup!<br>start computer finished!<br>begin to close the computer!<br>cpu shutdown!<br>memory shutdown!<br>disk shutdown!<br>computer closed!</p>
<p>如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，
可能会带来其他类的修改，这不是我们想要看到的，有了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就
是外观模式！</p>
<p><span><strong>10、桥接模式（Bridge）</strong></span></p>
<p>桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：<strong><span>将抽象化与实现化解耦，使得二者可以独立变化</span></strong>，
像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不
用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。我们来看看关系图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/35f0b172-b976-3757-bb51-c65d5c9ce68e.jpg" alt="" width="640" height="247"></p>
<p>实现代码：</p>
<p>先定义接口：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Sourceable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>分别定义两个实现类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SourceSub1&nbsp;</span><span>implements</span><span>&nbsp;Sourceable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"this&nbsp;is&nbsp;the&nbsp;first&nbsp;sub!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;SourceSub2&nbsp;</span><span>implements</span><span>&nbsp;Sourceable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"this&nbsp;is&nbsp;the&nbsp;second&nbsp;sub!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>定义一个桥，持有Sourceable的一个实例：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>abstract</span><span>&nbsp;</span><span>class</span><span>&nbsp;Bridge&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Sourceable&nbsp;source;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source.method();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Sourceable&nbsp;getSource()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;source;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setSource(Sourceable&nbsp;source)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.source&nbsp;=&nbsp;source;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MyBridge&nbsp;</span><span>extends</span><span>&nbsp;Bridge&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getSource().method();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;BridgeTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bridge&nbsp;bridge&nbsp;=&nbsp;<span>new</span><span>&nbsp;MyBridge();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>/*调用第一个对象*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sourceable&nbsp;source1&nbsp;=&nbsp;<span>new</span><span>&nbsp;SourceSub1();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bridge.setSource(source1);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bridge.method();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>/*调用第二个对象*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sourceable&nbsp;source2&nbsp;=&nbsp;<span>new</span><span>&nbsp;SourceSub2();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bridge.setSource(source2);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bridge.method();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>output：</p>
<p>this is the first sub!<br>this is the second sub!</p>
<p>这样，就通过对Bridge类的调用，实现了对接口Sourceable的实现类SourceSub1和SourceSub2的调用。接下来我再画个图，大家就应该明白了，因为这个图是我们JDBC连接的原理，有数据库学习基础的，一结合就都懂了。</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/6f713d07-1409-3312-99c9-fa6b0909f0b2.jpg" alt="" width="613" height="197"></p>
<p><span><strong>11、组合模式（Composite）</strong></span></p>
<p>组合模式有时又叫<strong><span>部分-整体</span></strong>模式在处理类似树形结构的问题时比较方便，看看关系图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/09cab656-5ff9-380e-9df1-326339ac3509.jpg" alt="" width="483" height="177"></p>
<p>直接来看代码：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;TreeNode&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;String&nbsp;name;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;TreeNode&nbsp;parent;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Vector&lt;TreeNode&gt;&nbsp;children&nbsp;=&nbsp;</span><span>new</span><span>&nbsp;Vector&lt;TreeNode&gt;();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;TreeNode(String&nbsp;name){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.name&nbsp;=&nbsp;name;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;String&nbsp;getName()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;name;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setName(String&nbsp;name)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.name&nbsp;=&nbsp;name;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;TreeNode&nbsp;getParent()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;parent;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setParent(TreeNode&nbsp;parent)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.parent&nbsp;=&nbsp;parent;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>//添加孩子节点</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;add(TreeNode&nbsp;node){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.add(node);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>//删除孩子节点</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;remove(TreeNode&nbsp;node){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.remove(node);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>//取得孩子节点</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Enumeration&lt;TreeNode&gt;&nbsp;getChildren(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;children.elements();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Tree&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;TreeNode&nbsp;root&nbsp;=&nbsp;<span>null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Tree(String&nbsp;name)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;root&nbsp;=&nbsp;<span>new</span><span>&nbsp;TreeNode(name);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tree&nbsp;tree&nbsp;=&nbsp;<span>new</span><span>&nbsp;Tree(</span><span>"A"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeNode&nbsp;nodeB&nbsp;=&nbsp;<span>new</span><span>&nbsp;TreeNode(</span><span>"B"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TreeNode&nbsp;nodeC&nbsp;=&nbsp;<span>new</span><span>&nbsp;TreeNode(</span><span>"C"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeB.add(nodeC);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tree.root.add(nodeB);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"build&nbsp;the&nbsp;tree&nbsp;finished!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>使用场景：将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，数等。</p>
<p><span><strong>12、享元模式（Flyweight）</strong></span></p>
<p>享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/f7aae0dd-b250-3829-bb07-49d87069bfbb.jpg" alt="" width="484" height="171"></p>
<p>FlyWeightFactory负责创建和管理享元单元，当一个客户端请求时，工厂需要检查当前对象池中是否有符合条件的对象，如果有，就返回已
经存在的对象，如果没有，则创建一个新对象，FlyWeight是超类。一提到共享池，我们很容易联想到Java里面的JDBC连接池，想想每个连接的特
点，我们不难总结出：适用于作共享的一些个对象，他们有一些共有的属性，就拿数据库连接池来说，url、driverClassName、
username、password及dbname，这些属性对于每个连接来说都是一样的，所以就适合用享元模式来处理，建一个工厂类，将上述类似属性作
为内部数据，其它的作为外部数据，在方法调用时，当做参数传进来，这样就节省了空间，减少了实例的数量。</p>
<p>看个例子：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/53bc0bf4-cafb-3a12-8574-e20a525f2b72.jpg" alt="" width="452" height="196"></p>
<p>看下数据库连接池的代码：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8239539">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8239539">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;ConnectionPool&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Vector&lt;Connection&gt;&nbsp;pool;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*公有属性*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;String&nbsp;url&nbsp;=&nbsp;</span><span>"jdbc:mysql://localhost:3306/test"</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;String&nbsp;username&nbsp;=&nbsp;</span><span>"root"</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;String&nbsp;password&nbsp;=&nbsp;</span><span>"root"</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;String&nbsp;driverClassName&nbsp;=&nbsp;</span><span>"com.mysql.jdbc.Driver"</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>int</span><span>&nbsp;poolSize&nbsp;=&nbsp;</span><span>100</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>static</span><span>&nbsp;ConnectionPool&nbsp;instance&nbsp;=&nbsp;</span><span>null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;Connection&nbsp;conn&nbsp;=&nbsp;<span>null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*构造方法，做一些初始化工作*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;ConnectionPool()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pool&nbsp;=&nbsp;<span>new</span><span>&nbsp;Vector&lt;Connection&gt;(poolSize);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>for</span><span>&nbsp;(</span><span>int</span><span>&nbsp;i&nbsp;=&nbsp;</span><span>0</span><span>;&nbsp;i&nbsp;&lt;&nbsp;poolSize;&nbsp;i++)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>try</span><span>&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class.forName(driverClassName);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;conn&nbsp;=&nbsp;DriverManager.getConnection(url,&nbsp;username,&nbsp;password);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pool.add(conn);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span>catch</span><span>&nbsp;(ClassNotFoundException&nbsp;e)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span>catch</span><span>&nbsp;(SQLException&nbsp;e)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;返回连接到连接池&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>synchronized</span><span>&nbsp;</span><span>void</span><span>&nbsp;release()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pool.add(conn);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*&nbsp;返回连接池中的一个数据库连接&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>synchronized</span><span>&nbsp;Connection&nbsp;getConnection()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(pool.size()&nbsp;&gt;&nbsp;</span><span>0</span><span>)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Connection&nbsp;conn&nbsp;=&nbsp;pool.get(<span>0</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pool.remove(conn);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;conn;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span>else</span><span>&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>&nbsp;</div>
<div>通过连接池的管理，实现了数据库连接的共享，不需要每一次都重新创建连接，节省了数据库重新创建的开销，提升了系统的性能！本章讲解了7种结构型模式，因为篇幅的问题，剩下的11种行为型模式，</div>

</div>
<div>
<p>本章是关于设计模式的最后一讲，会讲到第三种设计模式——行为型模式，共11种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命
令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。这段时间一直在写关于设计模式的东西，终于写到一半了，写博文是个很费时间的东西，
因为我得为读者负责，不论是图还是代码还是表述，都希望能尽量写清楚，以便读者理解，我想不论是我还是读者，都希望看到高质量的博文出来，从我本人出发，
我会一直坚持下去，不断更新，源源动力来自于读者朋友们的不断支持，我会尽自己的努力，写好每一篇文章！希望大家能不断给出意见和建议，共同打造完美的博
文！</p>
<p><em><span><strong>&nbsp;</strong></span></em></p>
<p><strong>&nbsp;</strong></p>
<p>先来张图，看看这11中模式的关系：</p>
<p>第一类：通过父类与子类的关系进行实现。第二类：两个类之间。第三类：类的状态。第四类：通过中间类</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/5e2feb58-4170-3c07-a370-ed99bdcab223.jpg" alt="" width="681" height="314"></p>
<p><span><strong>13、策略模式（strategy）</strong></span></p>
<p>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口，设计一个抽象类（可有可无，属于辅助类），提供辅助函数，关系图如下：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/2319a2c3-7ebd-3ee3-b389-1548074ea9c6.jpg" alt="" width="560" height="260"></p>
<p>图中ICalculator提供同意的方法，<br>AbstractCalculator是辅助类，提供辅助方法，接下来，依次实现下每个类：</p>
<p>首先统一接口：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;ICalculator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;calculate(String&nbsp;exp);&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>辅助类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>abstract</span><span>&nbsp;</span><span>class</span><span>&nbsp;AbstractCalculator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>[]&nbsp;split(String&nbsp;exp,String&nbsp;opt){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;array[]&nbsp;=&nbsp;exp.split(opt);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>int</span><span>&nbsp;arrayInt[]&nbsp;=&nbsp;</span><span>new</span><span>&nbsp;</span><span>int</span><span>[</span><span>2</span><span>];&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayInt[<span>0</span><span>]&nbsp;=&nbsp;Integer.parseInt(array[</span><span>0</span><span>]);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayInt[<span>1</span><span>]&nbsp;=&nbsp;Integer.parseInt(array[</span><span>1</span><span>]);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;arrayInt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>三个实现类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Plus&nbsp;</span><span>extends</span><span>&nbsp;AbstractCalculator&nbsp;</span><span>implements</span><span>&nbsp;ICalculator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;calculate(String&nbsp;exp)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>int</span><span>&nbsp;arrayInt[]&nbsp;=&nbsp;split(exp,</span><span>"\\+"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;arrayInt[</span><span>0</span><span>]+arrayInt[</span><span>1</span><span>];&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Minus&nbsp;</span><span>extends</span><span>&nbsp;AbstractCalculator&nbsp;</span><span>implements</span><span>&nbsp;ICalculator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;calculate(String&nbsp;exp)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>int</span><span>&nbsp;arrayInt[]&nbsp;=&nbsp;split(exp,</span><span>"-"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;arrayInt[</span><span>0</span><span>]-arrayInt[</span><span>1</span><span>];&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Multiply&nbsp;</span><span>extends</span><span>&nbsp;AbstractCalculator&nbsp;</span><span>implements</span><span>&nbsp;ICalculator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;calculate(String&nbsp;exp)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>int</span><span>&nbsp;arrayInt[]&nbsp;=&nbsp;split(exp,</span><span>"\\*"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;arrayInt[</span><span>0</span><span>]*arrayInt[</span><span>1</span><span>];&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>简单的测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;StrategyTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;exp&nbsp;=&nbsp;<span>"2+8"</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ICalculator&nbsp;cal&nbsp;=&nbsp;<span>new</span><span>&nbsp;Plus();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>int</span><span>&nbsp;result&nbsp;=&nbsp;cal.calculate(exp);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(result);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出：10</p>
<p>策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装。因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。</p>
<p><span><strong>14、模板方法模式（Template Method）</strong></span></p>
<p>解释一下模板方法模式，就是指：一个抽象类中，有一个主方法，再定义1...n个方法，可以是抽象的，也可以是实际的方法，定义一个类，继承该抽象类，重写抽象方法，通过调用抽象类，实现对子类的调用，先看个关系图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/c3d57775-ddf9-302b-9dfe-c65967518d3c.jpg" alt="" width="478" height="205"></p>
<p>就是在AbstractCalculator类中定义一个主方法calculate，calculate()调用spilt()等，Plus和
Minus分别继承AbstractCalculator类，通过对AbstractCalculator的调用实现对子类的调用，看下面的例子：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>abstract</span><span>&nbsp;</span><span>class</span><span>&nbsp;AbstractCalculator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*主方法，实现对本类其它方法的调用*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>final</span><span>&nbsp;</span><span>int</span><span>&nbsp;calculate(String&nbsp;exp,String&nbsp;opt){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>int</span><span>&nbsp;array[]&nbsp;=&nbsp;split(exp,opt);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;calculate(array[</span><span>0</span><span>],array[</span><span>1</span><span>]);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*被子类重写的方法*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>abstract</span><span>&nbsp;</span><span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;calculate(</span><span>int</span><span>&nbsp;num1,</span><span>int</span><span>&nbsp;num2);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>[]&nbsp;split(String&nbsp;exp,String&nbsp;opt){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;array[]&nbsp;=&nbsp;exp.split(opt);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>int</span><span>&nbsp;arrayInt[]&nbsp;=&nbsp;</span><span>new</span><span>&nbsp;</span><span>int</span><span>[</span><span>2</span><span>];&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayInt[<span>0</span><span>]&nbsp;=&nbsp;Integer.parseInt(array[</span><span>0</span><span>]);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arrayInt[<span>1</span><span>]&nbsp;=&nbsp;Integer.parseInt(array[</span><span>1</span><span>]);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;arrayInt;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Plus&nbsp;</span><span>extends</span><span>&nbsp;AbstractCalculator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;calculate(</span><span>int</span><span>&nbsp;num1,</span><span>int</span><span>&nbsp;num2)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;num1&nbsp;+&nbsp;num2;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;StrategyTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;exp&nbsp;=&nbsp;<span>"8+8"</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AbstractCalculator&nbsp;cal&nbsp;=&nbsp;<span>new</span><span>&nbsp;Plus();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>int</span><span>&nbsp;result&nbsp;=&nbsp;cal.calculate(exp,&nbsp;</span><span>"\\+"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(result);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>我跟踪下这个小程序的执行过程：首先将exp和"\\+"做参数，调用AbstractCalculator类里的
calculate(String,String)方法，在calculate(String,String)里调用同类的split()，之后再调用
calculate(int ,int)方法，从这个方法进入到子类中，执行完return num1 + 
num2后，将值返回到AbstractCalculator类，赋给result，打印出来。正好验证了我们开头的思路。</p>
<p><span><strong>15、观察者模式（Observer）</strong></span></p>
<p>包括这个模式在内的接下来的四个模式，都是类和类之间的关系，不涉及到继承，学的时候应该 
记得归纳，记得本文最开始的那个图。观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意
思是，当你订阅了该文章，如果后续有更新，会及时通知你。其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！
对象之间是一种一对多的关系。先来看看关系图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/d588525c-fbad-3040-971c-69b2716c67a4.jpg" alt="" width="626" height="380"></p>
<p>我解释下这些类的作用：MySubject类就是我们的主对象，Observer1和Observer2是依赖于MySubject的对象，当
MySubject变化时，Observer1和Observer2必然变化。AbstractSubject类中定义着需要监控的对象列表，可以对其进
行修改：增加或删除被监控对象，且当MySubject变化时，负责通知在列表内存在的对象。我们看实现代码：</p>
<p>一个Observer接口：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Observer&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;update();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>两个实现类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Observer1&nbsp;</span><span>implements</span><span>&nbsp;Observer&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;update()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"observer1&nbsp;has&nbsp;received!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Observer2&nbsp;</span><span>implements</span><span>&nbsp;Observer&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;update()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"observer2&nbsp;has&nbsp;received!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>Subject接口及实现类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Subject&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*增加观察者*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;add(Observer&nbsp;observer);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*删除观察者*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;del(Observer&nbsp;observer);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*通知所有的观察者*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;notifyObservers();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*自身的操作*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;operation();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>abstract</span><span>&nbsp;</span><span>class</span><span>&nbsp;AbstractSubject&nbsp;</span><span>implements</span><span>&nbsp;Subject&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Vector&lt;Observer&gt;&nbsp;vector&nbsp;=&nbsp;</span><span>new</span><span>&nbsp;Vector&lt;Observer&gt;();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;add(Observer&nbsp;observer)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector.add(observer);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;del(Observer&nbsp;observer)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vector.remove(observer);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;notifyObservers()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enumeration&lt;Observer&gt;&nbsp;enumo&nbsp;=&nbsp;vector.elements();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>while</span><span>(enumo.hasMoreElements()){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enumo.nextElement().update();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MySubject&nbsp;</span><span>extends</span><span>&nbsp;AbstractSubject&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;operation()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"update&nbsp;self!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;notifyObservers();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p><br>测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;ObserverTest&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject&nbsp;sub&nbsp;=&nbsp;<span>new</span><span>&nbsp;MySubject();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub.add(<span>new</span><span>&nbsp;Observer1());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub.add(<span>new</span><span>&nbsp;Observer2());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub.operation();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出：</p>
<p>update self!<br>observer1 has received!<br>observer2 has received!</p>
<p>&nbsp;这些东西，其实不难，只是有些抽象，不太容易整体理解，建议读者：<strong><span>根据关系图，新建项目，自己写代码（或者参考我的代码）,<strong>按照</strong>总体思路走一遍，这样才能体会它的思想，理解起来容易！</span></strong><strong><span>&nbsp;</span></strong></p>
<p><strong><span>16、迭代子模式（Iterator）</span></strong></p>
<p>顾名思义，迭代器模式就是顺序访问聚集中的对象，一般来说，集合中非常常见，如果对集合类比较熟悉的话，理解本模式会十分轻松。这句话包含两层意思：一是需要遍历的对象，即聚集对象，二是迭代器对象，用于对聚集对象进行遍历访问。我们看下关系图：</p>
<p>&nbsp;<img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/f7571a69-3c85-3fe1-b781-e460563a40a8.jpg" alt="" width="640" height="344"></p>
<p>这个思路和我们常用的一模一样，MyCollection中定义了集合的一些操作，MyIterator中定义了一系列迭代操作，且持有Collection实例，我们来看看实现代码：</p>
<p>两个接口：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Collection&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Iterator&nbsp;iterator();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*取得集合元素*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;get(</span><span>int</span><span>&nbsp;i);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>/*取得集合大小*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;size();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Iterator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>//前移</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;previous();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>//后移</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;next();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>boolean</span><span>&nbsp;hasNext();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>//取得第一个元素</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;first();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>两个实现：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MyCollection&nbsp;</span><span>implements</span><span>&nbsp;Collection&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;String&nbsp;string[]&nbsp;=&nbsp;{</span><span>"A"</span><span>,</span><span>"B"</span><span>,</span><span>"C"</span><span>,</span><span>"D"</span><span>,</span><span>"E"</span><span>};&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Iterator&nbsp;iterator()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>new</span><span>&nbsp;MyIterator(</span><span>this</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;get(</span><span>int</span><span>&nbsp;i)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;string[i];&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;size()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;string.length;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MyIterator&nbsp;</span><span>implements</span><span>&nbsp;Iterator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Collection&nbsp;collection;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>int</span><span>&nbsp;pos&nbsp;=&nbsp;-</span><span>1</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;MyIterator(Collection&nbsp;collection){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.collection&nbsp;=&nbsp;collection;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;previous()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>(pos&nbsp;&gt;&nbsp;</span><span>0</span><span>){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos--;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;collection.get(pos);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;next()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>(pos&lt;collection.size()-</span><span>1</span><span>){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos++;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;collection.get(pos);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>boolean</span><span>&nbsp;hasNext()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>(pos&lt;collection.size()-</span><span>1</span><span>){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>true</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<span>else</span><span>{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>false</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Object&nbsp;first()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pos&nbsp;=&nbsp;<span>0</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;collection.get(pos);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collection&nbsp;collection&nbsp;=&nbsp;<span>new</span><span>&nbsp;MyCollection();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator&nbsp;it&nbsp;=&nbsp;collection.iterator();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>while</span><span>(it.hasNext()){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(it.next());&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出：A B C D E</p>
<p>此处我们貌似模拟了一个集合类的过程，感觉是不是很爽？其实JDK中各个类也都是这些基本的东西，加一些设计模式，再加一些优化放到一起的，只要我们把这些东西学会了，掌握好了，我们也可以写出自己的集合类，甚至框架！</p>
<p><span><strong>17、责任链模式（Chain of Responsibility）<br></strong></span>接下
来我们将要谈谈责任链模式，有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发
出者并不清楚到底最终那个对象会处理该请求，所以，责任链模式可以实现，在隐瞒客户端的情况下，对系统进行动态的调整。先看看关系图：</p>
<p>&nbsp;<img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/729a82ce-0987-347c-a4f1-bf64dee59ddb.jpg" alt="" width="486" height="287"></p>
<p>&nbsp;</p>
<p>Abstracthandler类提供了get和set方法，方便MyHandle类设置和修改引用对象，MyHandle类是核心，实例化后生成一系列相互持有的对象，构成一条链。</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Handler&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;operator();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>abstract</span><span>&nbsp;</span><span>class</span><span>&nbsp;AbstractHandler&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Handler&nbsp;handler;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Handler&nbsp;getHandler()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;handler;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setHandler(Handler&nbsp;handler)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.handler&nbsp;=&nbsp;handler;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MyHandler&nbsp;</span><span>extends</span><span>&nbsp;AbstractHandler&nbsp;</span><span>implements</span><span>&nbsp;Handler&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;String&nbsp;name;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;MyHandler(String&nbsp;name)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.name&nbsp;=&nbsp;name;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;operator()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(name+<span>"deal!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>(getHandler()!=</span><span>null</span><span>){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getHandler().operator();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyHandler&nbsp;h1&nbsp;=&nbsp;<span>new</span><span>&nbsp;MyHandler(</span><span>"h1"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyHandler&nbsp;h2&nbsp;=&nbsp;<span>new</span><span>&nbsp;MyHandler(</span><span>"h2"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MyHandler&nbsp;h3&nbsp;=&nbsp;<span>new</span><span>&nbsp;MyHandler(</span><span>"h3"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h1.setHandler(h2);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h2.setHandler(h3);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h1.operator();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出：</p>
<p>h1deal!<br>h2deal!<br>h3deal!</p>
<p>此处强调一点就是，链接上的请求可以是一条链，可以是一个树，还可以是一个环，模式本身不约束这个，需要我们自己去实现，同时，在一个时刻，命令只允许由一个对象传给另一个对象，而不允许传给多个对象。</p>
<p><span><strong>&nbsp;18、命令模式（Command）</strong></span></p>
<p>命令模式很好理解，举个例子，司令员下令让士兵去干件事情，从整个事情的角度来考虑，司令员的作用是，发出口令，口令经过传递，传到了士兵耳朵里，
士兵去执行。这个过程好在，三者相互解耦，任何一方都不用去依赖其他人，只需要做好自己的事儿就行，司令员要的是结果，不会去关注到底士兵是怎么实现的。
我们看看关系图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/98cda4fc-00b1-300d-a25b-63229f0f1cbd.jpg" alt="" width="609" height="234"></p>
<p>Invoker是调用者（司令员），Receiver是被调用者（士兵），MyCommand是命令，实现了Command接口，持有接收对象，看实现代码：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Command&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;exe();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MyCommand&nbsp;</span><span>implements</span><span>&nbsp;Command&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Receiver&nbsp;receiver;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;MyCommand(Receiver&nbsp;receiver)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.receiver&nbsp;=&nbsp;receiver;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;exe()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;receiver.action();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Receiver&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;action(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"command&nbsp;received!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Invoker&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Command&nbsp;command;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Invoker(Command&nbsp;command)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.command&nbsp;=&nbsp;command;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;action(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;command.exe();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8243942">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8243942">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Receiver&nbsp;receiver&nbsp;=&nbsp;<span>new</span><span>&nbsp;Receiver();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Command&nbsp;cmd&nbsp;=&nbsp;<span>new</span><span>&nbsp;MyCommand(receiver);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invoker&nbsp;invoker&nbsp;=&nbsp;<span>new</span><span>&nbsp;Invoker(cmd);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invoker.action();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出：command received!</p>
<p>这个很哈理解，命令模式的目的就是达到命令的发出者和执行者之间解耦，实现请求和执行分开，熟悉Struts的同学应该知道，Struts其实就是一种将请求和呈现分离的技术，其中必然涉及命令模式的思想！</p>

</div>
<div>
<p>其实每个设计模式都是很重要的一种思想，看上去很熟，其实是因为我们在学到的东西中都有涉及，尽管有时我们并不知道，其实在Java本身的设计之中
处处都有体现，像AWT、JDBC、集合类、IO管道或者是Web框架，里面设计模式无处不在。因为我们篇幅有限，很难讲每一个设计模式都讲的很详细，不
过我会尽我所能，尽量在有限的空间和篇幅内，把意思写清楚了，更好让大家明白。本章不出意外的话，应该是设计模式最后一讲了，首先还是上一下上篇开头的那
个图：</p>
<p><img class="magplus" title="点击查看原始大小图片" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/5d3c9b85-c281-3c48-999c-d27095c6ec9f.jpg" alt="" width="700" height="313"></p>
<p>本章讲讲第三类和第四类。</p>
<p><strong><span>19、备忘录模式（Memento）</span></strong></p>
<p>主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象，个人觉得叫备份模式更形象些，通俗的讲下：假设有原始类A，A中有各种属性，A可以
决定需要备份的属性，备忘录类B是用来存储A的一些内部状态，类C呢，就是一个用来存储备忘录的，且只能存储，不能修改等操作。做个图来分析一下：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/853d5c5a-9b7b-3341-a72e-abd3cbc3c81f.jpg" alt="" width="629" height="237"></p>
<p>Original类是原始类，里面有需要保存的属性value及创建一个备忘录类，用来保存value值。Memento类是备忘录类，Storage类是存储备忘录的类，持有Memento类的实例，该模式很好理解。直接看源码：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Original&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;String&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;String&nbsp;getValue()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setValue(String&nbsp;value)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.value&nbsp;=&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Original(String&nbsp;value)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.value&nbsp;=&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Memento&nbsp;createMemento(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>new</span><span>&nbsp;Memento(value);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;restoreMemento(Memento&nbsp;memento){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.value&nbsp;=&nbsp;memento.getValue();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Memento&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;String&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Memento(String&nbsp;value)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.value&nbsp;=&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;String&nbsp;getValue()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setValue(String&nbsp;value)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.value&nbsp;=&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Storage&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Memento&nbsp;memento;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Storage(Memento&nbsp;memento)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.memento&nbsp;=&nbsp;memento;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Memento&nbsp;getMemento()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;memento;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setMemento(Memento&nbsp;memento)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.memento&nbsp;=&nbsp;memento;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>测试类：</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;创建原始类</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Original&nbsp;origi&nbsp;=&nbsp;<span>new</span><span>&nbsp;Original(</span><span>"egg"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;创建备忘录</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Storage&nbsp;storage&nbsp;=&nbsp;<span>new</span><span>&nbsp;Storage(origi.createMemento());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;修改原始类的状态</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"初始化状态为："</span><span>&nbsp;+&nbsp;origi.getValue());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origi.setValue(<span>"niu"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"修改后的状态为："</span><span>&nbsp;+&nbsp;origi.getValue());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;回复原始类的状态</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;origi.restoreMemento(storage.getMemento());&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"恢复后的状态为："</span><span>&nbsp;+&nbsp;origi.getValue());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<p>输出：</p>
<p>初始化状态为：egg<br>修改后的状态为：niu<br>恢复后的状态为：egg</p>
<p>简单描述下：新建原始类时，value被初始化为egg，后经过修改，将value的值置为niu，最后倒数第二行进行恢复状态，结果成功恢复了。其实我觉得这个模式叫“备份-恢复”模式最形象。</p>
<p><span><strong>20、状态模式（State）</strong></span></p>
<p>核心思想就是：当对象的状态改变时，同时改变其行为，很好理解！就拿QQ来说，有几种状态，在线、隐身、忙碌等，每个状态对应不同的操作，而且你的
好友也能看到你的状态，所以，状态模式就两点：1、可以通过改变状态来获得不同的行为。2、你的好友能同时看到你的变化。看图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/006156d2-f41f-3019-a194-b872a59ca426.jpg" alt=""></p>
<p>State类是个状态类，Context类可以实现切换，我们来看看代码：</p>
<p>&nbsp;</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>package</span><span>&nbsp;com.xtfggef.dp.state;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span>/**</span>&nbsp;</span></li>
<li><span><span>&nbsp;*&nbsp;状态类的核心类</span>&nbsp;</span></li>
<li><span><span>&nbsp;*&nbsp;2012-12-1</span>&nbsp;</span></li>
<li><span><span>&nbsp;*&nbsp;@author&nbsp;erqing</span>&nbsp;</span></li>
<li><span><span>&nbsp;*</span>&nbsp;</span></li>
<li><span><span>&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;State&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;String&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;String&nbsp;getValue()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setValue(String&nbsp;value)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.value&nbsp;=&nbsp;value;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method1(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"execute&nbsp;the&nbsp;first&nbsp;opt!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method2(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"execute&nbsp;the&nbsp;second&nbsp;opt!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>package</span><span>&nbsp;com.xtfggef.dp.state;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span>/**</span>&nbsp;</span></li>
<li><span><span>&nbsp;*&nbsp;状态模式的切换类&nbsp;&nbsp;&nbsp;2012-12-1</span>&nbsp;</span></li>
<li><span><span>&nbsp;*&nbsp;@author&nbsp;erqing</span>&nbsp;</span></li>
<li><span><span>&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span>&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Context&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;State&nbsp;state;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Context(State&nbsp;state)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.state&nbsp;=&nbsp;state;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;State&nbsp;getState()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;state;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setState(State&nbsp;state)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.state&nbsp;=&nbsp;state;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;method()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>if</span><span>&nbsp;(state.getValue().equals(</span><span>"state1"</span><span>))&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.method1();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span>else</span><span>&nbsp;</span><span>if</span><span>&nbsp;(state.getValue().equals(</span><span>"state2"</span><span>))&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.method2();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>

<span>测试类：</span>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;State&nbsp;state&nbsp;=&nbsp;<span>new</span><span>&nbsp;State();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Context&nbsp;context&nbsp;=&nbsp;<span>new</span><span>&nbsp;Context(state);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//设置第一种状态</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.setValue(<span>"state1"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.method();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//设置第二种状态</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state.setValue(<span>"state2"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.method();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>

<span>输出：</span>
<p>&nbsp;</p>
<p>execute the first opt!<br>execute the second opt!</p>
<p>根据这个特性，状态模式在日常开发中用的挺多的，尤其是做网站的时候，我们有时希望根据对象的某一属性，区别开他们的一些功能，比如说简单的权限控制等。<br><span><strong>21、访问者模式（Visitor）</strong></span></p>
<p>访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问
者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。访问者模式的优点是增加操作很容
易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。
—— From 百科</p>
<p>简单来说，访问者模式就是一种分离对象数据结构与行为的方法，通过这种分离，可达到为一个被访问者动态添加新的操作而无需做其它的修改的效果。简单关系图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/96bd38f3-2888-3cc5-b90f-0e7542dc5845.jpg" alt=""></p>
<p>来看看原码：一个Visitor类，存放要访问的对象，</p>
<p>&nbsp;</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Visitor&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;visit(Subject&nbsp;sub);&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MyVisitor&nbsp;</span><span>implements</span><span>&nbsp;Visitor&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;visit(Subject&nbsp;sub)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"visit&nbsp;the&nbsp;subject："</span><span>+sub.getSubject());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>

<span>Subject类，accept方法，接受将要访问它的对象，getSubject()获取将要被访问的属性，</span><br>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Subject&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;accept(Visitor&nbsp;visitor);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;String&nbsp;getSubject();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MySubject&nbsp;</span><span>implements</span><span>&nbsp;Subject&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;accept(Visitor&nbsp;visitor)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visitor.visit(<span>this</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;String&nbsp;getSubject()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;</span><span>"love"</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>

<span>测试：</span>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Visitor&nbsp;visitor&nbsp;=&nbsp;<span>new</span><span>&nbsp;MyVisitor();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Subject&nbsp;sub&nbsp;=&nbsp;<span>new</span><span>&nbsp;MySubject();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub.accept(visitor);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>

<span>输出：visit the subject：love</span>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>该模式适用场景：如果我们想为一个现有的类增加新功能，不得不考虑几个事情：1、新功能会不会与现有功能出现兼容性问题？2、以后会不会再需要添
加？3、如果类不允许修改代码怎么办？面对这些问题，最好的解决方法就是使用访问者模式，访问者模式适用于数据结构相对稳定的系统，把数据结构和算法解
耦，<br><span><strong>22、中介者模式（Mediator）</strong></span></p>
<p>中介者模式也是用来降低类类之间的耦合的，因为如果类类之间有依赖关系的话，不利于功能的拓展和维护，因为只要修改一个对象，其它关联的对象都得进
行修改。如果使用中介者模式，只需关心和Mediator类的关系，具体类类之间的关系及调度交给Mediator就行，这有点像spring容器的作
用。先看看图：</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/f1f2cc36-ab27-32fa-9906-9cdee2c2b625.jpg" alt=""></p>
<p>User类统一接口，User1和User2分别是不同的对象，二者之间有关联，如果不采用中介者模式，则需要二者相互持有引用，这样二者的耦合度
很高，为了解耦，引入了Mediator类，提供统一接口，MyMediator为其实现类，里面持有User1和User2的实例，用来实现对
User1和User2的控制。这样User1和User2两个对象相互独立，他们只需要保持好和Mediator之间的关系就行，剩下的全由
MyMediator类来维护！基本实现：</p>
<p>&nbsp;</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Mediator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;createMediator();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;workAll();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;MyMediator&nbsp;</span><span>implements</span><span>&nbsp;Mediator&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;User&nbsp;user1;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;User&nbsp;user2;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;User&nbsp;getUser1()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;user1;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;User&nbsp;getUser2()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;user2;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;createMediator()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user1&nbsp;=&nbsp;<span>new</span><span>&nbsp;User1(</span><span>this</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user2&nbsp;=&nbsp;<span>new</span><span>&nbsp;User2(</span><span>this</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;workAll()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user1.work();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user2.work();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>abstract</span><span>&nbsp;</span><span>class</span><span>&nbsp;User&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;Mediator&nbsp;mediator;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Mediator&nbsp;getMediator(){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;mediator;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;User(Mediator&nbsp;mediator)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.mediator&nbsp;=&nbsp;mediator;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>abstract</span><span>&nbsp;</span><span>void</span><span>&nbsp;work();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;User1&nbsp;</span><span>extends</span><span>&nbsp;User&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;User1(Mediator&nbsp;mediator){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>super</span><span>(mediator);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;work()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"user1&nbsp;exe!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;User2&nbsp;</span><span>extends</span><span>&nbsp;User&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;User2(Mediator&nbsp;mediator){&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>super</span><span>(mediator);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;work()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span>"user2&nbsp;exe!"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>

<span>测试类：</span>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mediator&nbsp;mediator&nbsp;=&nbsp;<span>new</span><span>&nbsp;MyMediator();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mediator.createMediator();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mediator.workAll();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>

<span>输出：</span>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>user1 exe!<br>user2 exe!<br><span><strong>23、解释器模式（Interpreter）</strong></span><br>解释器模式是我们暂时的最后一讲，一般主要应用在OOP开发中的编译器的开发中，所以适用面比较窄。</p>
<p><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/c87e402e-a355-3761-9ce3-7978956ba475.jpg" alt=""></p>
<p>Context类是一个上下文环境类，Plus和Minus分别是用来计算的实现，代码如下：</p>
<p>&nbsp;</p>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>interface</span><span>&nbsp;Expression&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;interpret(Context&nbsp;context);&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Plus&nbsp;</span><span>implements</span><span>&nbsp;Expression&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;interpret(Context&nbsp;context)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;context.getNum1()+context.getNum2();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Minus&nbsp;</span><span>implements</span><span>&nbsp;Expression&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;interpret(Context&nbsp;context)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;context.getNum1()-context.getNum2();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Context&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>int</span><span>&nbsp;num1;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>private</span><span>&nbsp;</span><span>int</span><span>&nbsp;num2;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;Context(</span><span>int</span><span>&nbsp;num1,&nbsp;</span><span>int</span><span>&nbsp;num2)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.num1&nbsp;=&nbsp;num1;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.num2&nbsp;=&nbsp;num2;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;getNum1()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;num1;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setNum1(</span><span>int</span><span>&nbsp;num1)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.num1&nbsp;=&nbsp;num1;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>int</span><span>&nbsp;getNum2()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span><span>&nbsp;num2;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>void</span><span>&nbsp;setNum2(</span><span>int</span><span>&nbsp;num2)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>this</span><span>.num2&nbsp;=&nbsp;num2;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>
<div>
<div>
<div><strong>[java]</strong>&nbsp;<a title="view plain" href="http://blog.csdn.net/zhangerqing/article/details/8245537">view plain</a><a title="copy" href="http://blog.csdn.net/zhangerqing/article/details/8245537">copy</a></div>

</div>
<ol>
<li><span><span>public</span><span>&nbsp;</span><span>class</span><span>&nbsp;Test&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span>public</span><span>&nbsp;</span><span>static</span><span>&nbsp;</span><span>void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;计算9+2-8的值</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>int</span><span>&nbsp;result&nbsp;=&nbsp;</span><span>new</span><span>&nbsp;Minus().interpret((</span><span>new</span><span>&nbsp;Context(</span><span>new</span><span>&nbsp;Plus()&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.interpret(<span>new</span><span>&nbsp;Context(</span><span>9</span><span>,&nbsp;</span><span>2</span><span>)),&nbsp;</span><span>8</span><span>)));&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(result);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>

</ol></div>

<span>最后输出正确的结果：3。</span>
<p>&nbsp;</p>
<p>基本就这样，解释器模式用来做各种各样的解释器，如正则表达式等的解释器等等！<br><br></p>
<p>资源：http://download.csdn.net/detail/zhangerqing/4835830</p>
<p>&nbsp;</p>
<p>原文链接：<strong>http://blog.csdn.net/zhangerqing</strong></p>

</div></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory">分类: <a href="http://www.cnblogs.com/maowang1991/category/441518.html">JAVA</a></div>
<div id="EntryTag"></div>
<div id="blog_post_info"><div id="green_channel">
<a href="javascript:void(0);" id="green_channel_digg" onclick="DiggIt(3023236,cb_blogId,1);green_channel_success(this,'谢谢推荐！');">好文要顶</a>
<a id="green_channel_follow" onclick="c_follow();" href="javascript:void(0);">关注我</a>
<a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a><a id="green_channel_contact" href="http://msg.cnblogs.com/send/maowang" target="_blank">联系我</a>
<a id="green_channel_weibo" href="javascript:void(0);" title="分享至新浪微博" onclick="ShareToTsina()"><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/icon_weibo_24.png" alt=""></a>
<a id="green_channel_wechat" href="javascript:void(0);" title="分享至微信" onclick="shareOnWechat()"><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/wechat.png" alt=""></a>
</div>
<div id="author_profile">
<div id="author_profile_info" class="author_profile_info">
<a href="http://home.cnblogs.com/u/maowang1991/" target="_blank"><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/u225727.jpg" class="author_avatar" alt=""></a>
<div id="author_profile_detail" class="author_profile_info">
<a href="http://home.cnblogs.com/u/maowang1991/">maowang</a><br>
<a href="http://home.cnblogs.com/u/maowang1991/followees">关注 - 12</a><br>
<a href="http://home.cnblogs.com/u/maowang1991/followers">粉丝 - 196</a>
</div>
</div>
<div class="clear"></div>
<div id="author_profile_honor"></div>
<div id="author_profile_follow">
    <a href="javascript:void(0);" onclick="c_follow();return false;">+加关注</a>
</div>
</div>
<div id="div_digg">										
    <div class="diggit" onclick="votePost(3023236,'Digg')">
        <span class="diggnum" id="digg_count">65</span>
    </div>
	<div class="buryit" onclick="votePost(3023236,'Bury')"> 
		<span class="burynum" id="bury_count">0</span>
	</div>
	<div class="clear"></div>	
	<div class="diggword" id="digg_tips">
    (请您对文章做出评价)
    </div>	
</div>
</div>
<div class="clear"></div>
<div id="post_next_prev"><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3022955.html" class="p_n_p_prefix">« </a> 上一篇：<a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3022955.html" title="发布于2013-04-15 21:30">关于网络编程中MTU、TCP、UDP优化配置的一些总结</a><br><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/16/3024393.html" class="p_n_p_prefix">» </a> 下一篇：<a href="http://www.cnblogs.com/maowang1991/archive/2013/04/16/3024393.html" title="发布于2013-04-16 17:54">计算机网络各层协议</a><br></div>
</div>


		</div>
		<div class="postDesc">posted @ <span id="post-date">2013-04-15 23:43</span> <a href="http://www.cnblogs.com/maowang1991/">maowang</a> 阅读(<span id="post_view_count">197852</span>) 评论(<span id="post_comment_count">32</span>)  <a href="http://i.cnblogs.com/EditPosts.aspx?postid=3023236" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(3023236);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=true,cb_blogId=135576,cb_entryId=3023236,cb_blogApp=currentBlogApp,cb_blogUserGuid='a233be40-97fe-df11-ac81-842b2b196315',cb_entryCreatedDate='2013/4/15 23:43:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"><div id="comments_pager_top"></div>
<br>
<div class="feedback_area_title">评论列表</div>
<div class="feedbackNoItems"></div>	

		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3029759,'/bsqNQAHBoOFNXXQb6c4Ect4aR6XLXWwNJzSbsOQHnvaxX/Gchfvfw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3029759,'/bsqNQAHBoOFNXXQb6c4Ect4aR6XLXWwNJzSbsOQHnvaxX/Gchfvfw==')">引用</a></span>
				</div>
				<a href="#3029759" class="layer">#1楼</a><a name="3029759" id="comment_anchor_3029759"></a>  <span class="comment_date">2014-09-17 14:37</span> <a id="a_comment_author_3029759" href="http://www.cnblogs.com/xwgblog/" target="_blank">xiaoweige</a> <a href="http://msg.cnblogs.com/send/xiaoweige" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3029759" class="blog_comment_body">好文章.</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3029759,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3029759,'Bury',this)">反对(0)</a></div><span id="comment_3029759_avatar" style="display:none;">http://pic.cnblogs.com/face/585087/20160115151909.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3032304,'HEPPEMMy9bcJ7ZYSwUbtSVy1LxA5cQ4j8hEuIfMOdl8vyKmmatb7iw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3032304,'HEPPEMMy9bcJ7ZYSwUbtSVy1LxA5cQ4j8hEuIfMOdl8vyKmmatb7iw==')">引用</a></span>
				</div>
				<a href="#3032304" class="layer">#2楼</a><a name="3032304" id="comment_anchor_3032304"></a>  <span class="comment_date">2014-09-22 16:03</span> <a id="a_comment_author_3032304" href="http://www.cnblogs.com/zhougaojun/" target="_blank">gaojun.zhou</a> <a href="http://msg.cnblogs.com/send/gaojun.zhou" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3032304" class="blog_comment_body"><a href="#3029759" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3029759);">@</a>xiaoweige<br><fieldset class="comment_quote"><legend><a href="#3029759" title="查看引用原文">引用</a></legend>好文章.</fieldset></div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3032304,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3032304,'Bury',this)">反对(0)</a></div><span id="comment_3032304_avatar" style="display:none;">http://pic.cnblogs.com/face/513075/20131107112451.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3032903,'yxji3RO9/A64D6UfF0/+qSOBbxNLUw4BCGYb2DL6yELi17mwEmPFWg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3032903,'yxji3RO9/A64D6UfF0/+qSOBbxNLUw4BCGYb2DL6yELi17mwEmPFWg==')">引用</a></span>
				</div>
				<a href="#3032903" class="layer">#3楼</a><a name="3032903" id="comment_anchor_3032903"></a>  <span class="comment_date">2014-09-23 14:10</span> <a id="a_comment_author_3032903" href="http://home.cnblogs.com/u/675216/" target="_blank">姜赤那</a> <a href="http://msg.cnblogs.com/send/%E5%A7%9C%E8%B5%A4%E9%82%A3" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3032903" class="blog_comment_body">前面开发一直没有详细了解Java设计模式，今天受教了。版主写的很好，支持</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3032903,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3032903,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3041981,'/49iEPD9qLgr9KhCFHmknw9d/K3wHVCe2qO/23k8mrhYXX8Rf2A8Zw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3041981,'/49iEPD9qLgr9KhCFHmknw9d/K3wHVCe2qO/23k8mrhYXX8Rf2A8Zw==')">引用</a></span>
				</div>
				<a href="#3041981" class="layer">#4楼</a><a name="3041981" id="comment_anchor_3041981"></a>  <span class="comment_date">2014-10-11 16:08</span> <a id="a_comment_author_3041981" href="http://home.cnblogs.com/u/680331/" target="_blank">南山鱼爸</a> <a href="http://msg.cnblogs.com/send/%E5%8D%97%E5%B1%B1%E9%B1%BC%E7%88%B8" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3041981" class="blog_comment_body">看了一整天，感觉受益良多，谢谢啦！</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3041981,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3041981,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3042350,'PzG+6U37HtGYDF0zSw18j2GIHwVjO4SCsAFOQKsuAXdbxTYY3Dj2fw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3042350,'PzG+6U37HtGYDF0zSw18j2GIHwVjO4SCsAFOQKsuAXdbxTYY3Dj2fw==')">引用</a></span>
				</div>
				<a href="#3042350" class="layer">#5楼</a><a name="3042350" id="comment_anchor_3042350"></a>  <span class="comment_date">2014-10-12 16:34</span> <a id="a_comment_author_3042350" href="http://home.cnblogs.com/u/680592/" target="_blank">半空空空</a> <a href="http://msg.cnblogs.com/send/%E5%8D%8A%E7%A9%BA%E7%A9%BA%E7%A9%BA" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3042350" class="blog_comment_body">很好 很详细 受益匪浅</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3042350,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3042350,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3107969,'dO9fYVDmLxok5Yc8CURn88VFMN5AwyHqn7kB6UgusV3sx3sbtMxzhA==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3107969,'dO9fYVDmLxok5Yc8CURn88VFMN5AwyHqn7kB6UgusV3sx3sbtMxzhA==')">引用</a></span>
				</div>
				<a href="#3107969" class="layer">#6楼</a><a name="3107969" id="comment_anchor_3107969"></a>  <span class="comment_date">2015-01-16 09:55</span> <a id="a_comment_author_3107969" href="http://www.cnblogs.com/woshidalao/" target="_blank">乱在长安</a> <a href="http://msg.cnblogs.com/send/%E4%B9%B1%E5%9C%A8%E9%95%BF%E5%AE%89" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3107969" class="blog_comment_body">好文章！！！一定要好好看看</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3107969,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3107969,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3131283,'PdJ/MIl9AQGclM5dPQuXja1QTmhYu5+hnUERO69LSjIGbAHKCr1wEQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3131283,'PdJ/MIl9AQGclM5dPQuXja1QTmhYu5+hnUERO69LSjIGbAHKCr1wEQ==')">引用</a></span>
				</div>
				<a href="#3131283" class="layer">#7楼</a><a name="3131283" id="comment_anchor_3131283"></a>  <span class="comment_date">2015-02-25 14:40</span> <a id="a_comment_author_3131283" href="http://home.cnblogs.com/u/710116/" target="_blank">leellun</a> <a href="http://msg.cnblogs.com/send/leellun" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3131283" class="blog_comment_body">真心感觉不错！比书本解释的清楚了。就是有些地方感觉理解不到<br>单例模式中<br>d&gt;B进入synchronized块，由于instance此时不是null，因此它马上离开了synchronized块并将结果返回给调用该方法的程序。<br>如果A进入synchronized，分配空间和赋值不是完成后才会出来吗 选项d是不是不会出现<br>是不是应该是A进入synchronized时正在分配instance空间，但还没有初始化。此时B进入if(instance==null)判定，由于instance此时不是null，B就不会进入synchronized</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3131283,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3131283,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3140385,'rqZnrNdVcqGN5vhddqTTGUKeC0kRwd5FBCWShjzNoAZ50GVUec8NlA==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3140385,'rqZnrNdVcqGN5vhddqTTGUKeC0kRwd5FBCWShjzNoAZ50GVUec8NlA==')">引用</a></span>
				</div>
				<a href="#3140385" class="layer">#8楼</a><a name="3140385" id="comment_anchor_3140385"></a>  <span class="comment_date">2015-03-13 16:03</span> <a id="a_comment_author_3140385" href="http://home.cnblogs.com/u/730789/" target="_blank">505233081</a> <a href="http://msg.cnblogs.com/send/505233081" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3140385" class="blog_comment_body">棒棒哒</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3140385,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3140385,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3151507,'uzu3vBLojQ4SAaMFImCIr9eZ7aSrYmzYo9BMP8x6oCa2sg6OTNyFbg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3151507,'uzu3vBLojQ4SAaMFImCIr9eZ7aSrYmzYo9BMP8x6oCa2sg6OTNyFbg==')">引用</a></span>
				</div>
				<a href="#3151507" class="layer">#9楼</a><a name="3151507" id="comment_anchor_3151507"></a>  <span class="comment_date">2015-03-29 14:04</span> <a id="a_comment_author_3151507" href="http://www.cnblogs.com/takemybreathaway/" target="_blank">我和我的倔强</a> <a href="http://msg.cnblogs.com/send/%E6%88%91%E5%92%8C%E6%88%91%E7%9A%84%E5%80%94%E5%BC%BA" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3151507" class="blog_comment_body">好文章必须顶，看文不顶没良心呀</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3151507,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3151507,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3156902,'3vzBbrZHGbkKS4pg32aT87gtacGfOefuJG3V6ms6R7p0raCTmIi8rw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3156902,'3vzBbrZHGbkKS4pg32aT87gtacGfOefuJG3V6ms6R7p0raCTmIi8rw==')">引用</a></span>
				</div>
				<a href="#3156902" class="layer">#10楼</a><a name="3156902" id="comment_anchor_3156902"></a>  <span class="comment_date">2015-04-06 16:10</span> <a id="a_comment_author_3156902" href="http://www.cnblogs.com/mihe/" target="_blank">零℃弥合</a> <a href="http://msg.cnblogs.com/send/%E9%9B%B6%E2%84%83%E5%BC%A5%E5%90%88" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3156902" class="blog_comment_body">这可真是篇好文章</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3156902,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3156902,'Bury',this)">反对(0)</a></div><span id="comment_3156902_avatar" style="display:none;">http://pic.cnblogs.com/face/370894/20140420002646.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3161011,'CUisDNoDSCK5quCGDvRpdmVlDYIwospML807AcoJM2BHPT4gOoXHQw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3161011,'CUisDNoDSCK5quCGDvRpdmVlDYIwospML807AcoJM2BHPT4gOoXHQw==')">引用</a></span>
				</div>
				<a href="#3161011" class="layer">#11楼</a><a name="3161011" id="comment_anchor_3161011"></a>  <span class="comment_date">2015-04-12 18:55</span> <a id="a_comment_author_3161011" href="http://home.cnblogs.com/u/563807/" target="_blank">sstong123</a> <a href="http://msg.cnblogs.com/send/sstong123" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3161011" class="blog_comment_body">很好的文章，非常感谢！</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3161011,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3161011,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3167035,'3+lmku5zWKoC53orX5Zd+p+sBdWYViFz5LgpkZNe3SOTqi6eyB34iA==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3167035,'3+lmku5zWKoC53orX5Zd+p+sBdWYViFz5LgpkZNe3SOTqi6eyB34iA==')">引用</a></span>
				</div>
				<a href="#3167035" class="layer">#12楼</a><a name="3167035" id="comment_anchor_3167035"></a>  <span class="comment_date">2015-04-21 14:30</span> <a id="a_comment_author_3167035" href="http://www.cnblogs.com/yidongdematong/" target="_blank">子非余的鱼</a> <a href="http://msg.cnblogs.com/send/%E5%AD%90%E9%9D%9E%E4%BD%99%E7%9A%84%E9%B1%BC" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3167035" class="blog_comment_body">看了都说好啊</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3167035,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3167035,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3181320,'nVC7N7sfgotFwT2CEbElAnL2MZNK78issvGFJp8GOmYQbd1C0Su+og==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3181320,'nVC7N7sfgotFwT2CEbElAnL2MZNK78issvGFJp8GOmYQbd1C0Su+og==')">引用</a></span>
				</div>
				<a href="#3181320" class="layer">#13楼</a><a name="3181320" id="comment_anchor_3181320"></a>  <span class="comment_date">2015-05-11 22:53</span> <a id="a_comment_author_3181320" href="http://home.cnblogs.com/u/756161/" target="_blank">泯枫</a> <a href="http://msg.cnblogs.com/send/%E6%B3%AF%E6%9E%AB" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3181320" class="blog_comment_body">例子中的工厂模式应该只是简单工厂吧，普通工厂模式中差异的部分需要封装在不同的工厂中，即多个工厂实际类</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3181320,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3181320,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3183642,'0j5vcl9WoNOeTDcbm43cNxCx1JPsGnwRbF4Y6A1gM4i0xh95KcfQLg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3183642,'0j5vcl9WoNOeTDcbm43cNxCx1JPsGnwRbF4Y6A1gM4i0xh95KcfQLg==')">引用</a></span>
				</div>
				<a href="#3183642" class="layer">#14楼</a><a name="3183642" id="comment_anchor_3183642"></a>  <span class="comment_date">2015-05-14 11:14</span> <a id="a_comment_author_3183642" href="http://home.cnblogs.com/u/757338/" target="_blank">co&amp;de</a> <a href="http://msg.cnblogs.com/send/co%26amp%3Bde" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3183642" class="blog_comment_body">good content</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3183642,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3183642,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3184801,'Zrh6dQc6wq1q/jE26dB/bxzv+rM5TC8GW3uVG7KtpsCzc3SHadV1aA==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3184801,'Zrh6dQc6wq1q/jE26dB/bxzv+rM5TC8GW3uVG7KtpsCzc3SHadV1aA==')">引用</a></span>
				</div>
				<a href="#3184801" class="layer">#15楼</a><a name="3184801" id="comment_anchor_3184801"></a>  <span class="comment_date">2015-05-15 14:57</span> <a id="a_comment_author_3184801" href="http://home.cnblogs.com/u/611470/" target="_blank">博杨</a> <a href="http://msg.cnblogs.com/send/%E5%8D%9A%E6%9D%A8" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3184801" class="blog_comment_body">不错</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3184801,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3184801,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3189678,'tZGYW+CfyOnJDr0HVxPdX09giA4dtHLqe7VIs57tqsSOusbzZp+PqQ==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3189678,'tZGYW+CfyOnJDr0HVxPdX09giA4dtHLqe7VIs57tqsSOusbzZp+PqQ==')">引用</a></span>
				</div>
				<a href="#3189678" class="layer">#16楼</a><a name="3189678" id="comment_anchor_3189678"></a>  <span class="comment_date">2015-05-21 17:47</span> <a id="a_comment_author_3189678" href="http://home.cnblogs.com/u/631268/" target="_blank">残_雪</a> <a href="http://msg.cnblogs.com/send/%E6%AE%8B_%E9%9B%AA" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3189678" class="blog_comment_body">mark</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3189678,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3189678,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3215267,'DxHqu54JaWMnzCFR/1HvKqkyi9f4mNH4AY5LsHBox+c/uxtxfxFbfg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3215267,'DxHqu54JaWMnzCFR/1HvKqkyi9f4mNH4AY5LsHBox+c/uxtxfxFbfg==')">引用</a></span>
				</div>
				<a href="#3215267" class="layer">#17楼</a><a name="3215267" id="comment_anchor_3215267"></a>  <span class="comment_date">2015-06-25 17:35</span> <a id="a_comment_author_3215267" href="http://home.cnblogs.com/u/758655/" target="_blank">奶瓶居士</a> <a href="http://msg.cnblogs.com/send/%E5%A5%B6%E7%93%B6%E5%B1%85%E5%A3%AB" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3215267" class="blog_comment_body">好文章，简单易懂</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3215267,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3215267,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3242108,'CrhczIpFX+D1q59rO5JlGDdUsQ8Wo8vZHKcQYNTYVx01utAcA5McMw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3242108,'CrhczIpFX+D1q59rO5JlGDdUsQ8Wo8vZHKcQYNTYVx01utAcA5McMw==')">引用</a></span>
				</div>
				<a href="#3242108" class="layer">#18楼</a><a name="3242108" id="comment_anchor_3242108"></a>  <span class="comment_date">2015-08-06 09:00</span> <a id="a_comment_author_3242108" href="http://www.cnblogs.com/cangqiongbingchen/" target="_blank">苍穹冰尘</a> <a href="http://msg.cnblogs.com/send/%E8%8B%8D%E7%A9%B9%E5%86%B0%E5%B0%98" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3242108" class="blog_comment_body">赞一个！！！！！</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3242108,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3242108,'Bury',this)">反对(0)</a></div><span id="comment_3242108_avatar" style="display:none;">http://pic.cnblogs.com/face/751090/20150525182746.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3250174,'3k5t2M598AA01sq+RGY04P6KgASol4QDxSJkkztsm3a+5Pw2UUuOXA==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3250174,'3k5t2M598AA01sq+RGY04P6KgASol4QDxSJkkztsm3a+5Pw2UUuOXA==')">引用</a></span>
				</div>
				<a href="#3250174" class="layer">#19楼</a><a name="3250174" id="comment_anchor_3250174"></a>  <span class="comment_date">2015-08-19 11:13</span> <a id="a_comment_author_3250174" href="http://www.cnblogs.com/tanglc/" target="_blank">huazhiliange</a> <a href="http://msg.cnblogs.com/send/huazhiliange" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3250174" class="blog_comment_body">mark一下</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3250174,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3250174,'Bury',this)">反对(0)</a></div><span id="comment_3250174_avatar" style="display:none;">http://pic.cnblogs.com/face/550873/20130725202330.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3259623,'2bfS6MU+L65RDLEK45g/VRc3+o+f37qlEj1oE5/mJUpPtSiH1Acbkw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3259623,'2bfS6MU+L65RDLEK45g/VRc3+o+f37qlEj1oE5/mJUpPtSiH1Acbkw==')">引用</a></span>
				</div>
				<a href="#3259623" class="layer">#20楼</a><a name="3259623" id="comment_anchor_3259623"></a>  <span class="comment_date">2015-09-03 22:00</span> <a id="a_comment_author_3259623" href="http://www.cnblogs.com/dwade/" target="_blank">乐雨</a> <a href="http://msg.cnblogs.com/send/%E4%B9%90%E9%9B%A8" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3259623" class="blog_comment_body">mark</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3259623,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3259623,'Bury',this)">反对(0)</a></div><span id="comment_3259623_avatar" style="display:none;">http://pic.cnblogs.com/face/u337684.jpg?id=03211239</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3268458,'QHgMmXAcGw2n+zXMxVpBTiW+F283hF0Sru9gV4JUoRfq+EHl/v0s4g==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3268458,'QHgMmXAcGw2n+zXMxVpBTiW+F283hF0Sru9gV4JUoRfq+EHl/v0s4g==')">引用</a></span>
				</div>
				<a href="#3268458" class="layer">#21楼</a><a name="3268458" id="comment_anchor_3268458"></a>  <span class="comment_date">2015-09-17 13:43</span> <a id="a_comment_author_3268458" href="http://home.cnblogs.com/u/812561/" target="_blank">Mr·Cool</a> <a href="http://msg.cnblogs.com/send/Mr%26%23183%3BCool" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3268458" class="blog_comment_body">wonderful!</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3268458,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3268458,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3275705,'pXmWX5p6wHcwFTkROoqtAG6gLaJgvf2NajvnVxLc8p7tCpSPCvk7Ig==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3275705,'pXmWX5p6wHcwFTkROoqtAG6gLaJgvf2NajvnVxLc8p7tCpSPCvk7Ig==')">引用</a></span>
				</div>
				<a href="#3275705" class="layer">#22楼</a><a name="3275705" id="comment_anchor_3275705"></a>  <span class="comment_date">2015-09-28 10:34</span> <a id="a_comment_author_3275705" href="http://www.cnblogs.com/flyfeifei66/" target="_blank">赵举飞</a> <a href="http://msg.cnblogs.com/send/%E8%B5%B5%E4%B8%BE%E9%A3%9E" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3275705" class="blog_comment_body">抽象工厂的疑问：一个factory对应一个sender，最终我要的就是一个sender，为什么我不直接new一个sender那？这个是jre就是我的factory。</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3275705,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3275705,'Bury',this)">反对(0)</a></div><span id="comment_3275705_avatar" style="display:none;">http://pic.cnblogs.com/face/u69089.jpg</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3276037,'lIg4dJYE6vT7Xlp8oW4NY08vz8AXtFNqEGEH/eX8Qawbol/vpQnEQg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3276037,'lIg4dJYE6vT7Xlp8oW4NY08vz8AXtFNqEGEH/eX8Qawbol/vpQnEQg==')">引用</a></span>
				</div>
				<a href="#3276037" class="layer">#23楼</a><a name="3276037" id="comment_anchor_3276037"></a>  <span class="comment_date">2015-09-28 17:56</span> <a id="a_comment_author_3276037" href="http://home.cnblogs.com/u/674119/" target="_blank">马宁波</a> <a href="http://msg.cnblogs.com/send/%E9%A9%AC%E5%AE%81%E6%B3%A2" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3276037" class="blog_comment_body"><a href="#3275705" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3275705);">@</a>赵举飞<br><fieldset class="comment_quote"><legend><a href="#3275705" title="查看引用原文">引用</a></legend>抽象工厂的疑问：一个factory对应一个sender，最终我要的就是一个sender，为什么我不直接new一个sender那？这个是jre就是我的factory。</fieldset><br>“其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就OK了，无需去改动现成的代码。这样做，拓展性较好！”<br>我觉得主要是下面这两句调用都是针对抽象类的，可以是对外提供的接口，使用者不需要知道怎么实现的。添加了新功能，这里的代码不用修改。要是直接new，改动的代码会比较多<br>        Sender sender = provider.produce();  <br>        sender.Send();</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3276037,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3276037,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3276038,'pXmWX5p6wHcwFTkROoqtAG6gLaJgvf2NajvnVxLc8p7tCpSPCvk7Ig==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3276038,'pXmWX5p6wHcwFTkROoqtAG6gLaJgvf2NajvnVxLc8p7tCpSPCvk7Ig==')">引用</a></span>
				</div>
				<a href="#3276038" class="layer">#24楼</a><a name="3276038" id="comment_anchor_3276038"></a>  <span class="comment_date">2015-09-28 18:01</span> <a id="a_comment_author_3276038" href="http://www.cnblogs.com/flyfeifei66/" target="_blank">赵举飞</a> <a href="http://msg.cnblogs.com/send/%E8%B5%B5%E4%B8%BE%E9%A3%9E" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3276038" class="blog_comment_body"><a href="#3276037" title="查看所回复的评论" onclick="commentManager.renderComments(0,50,3276037);">@</a>马宁波<br>或许配合spring能理解些吧</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3276038,'Digg',this)">支持(1)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3276038,'Bury',this)">反对(0)</a></div><span id="comment_3276038_avatar" style="display:none;">http://pic.cnblogs.com/face/u69089.jpg</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3282011,'xcowBb3qdFB+A39PguZtR1s+LHqT/4KQ+3tvSW8iyXcS4KzYyW2XFw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3282011,'xcowBb3qdFB+A39PguZtR1s+LHqT/4KQ+3tvSW8iyXcS4KzYyW2XFw==')">引用</a></span>
				</div>
				<a href="#3282011" class="layer">#25楼</a><a name="3282011" id="comment_anchor_3282011"></a>  <span class="comment_date">2015-10-10 16:30</span> <a id="a_comment_author_3282011" href="http://www.cnblogs.com/yincan2014/" target="_blank">o好久不见o</a> <a href="http://msg.cnblogs.com/send/o%E5%A5%BD%E4%B9%85%E4%B8%8D%E8%A7%81o" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3282011" class="blog_comment_body">感觉自己用的比较多的就工厂模式，单例模式和代理模式.</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3282011,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3282011,'Bury',this)">反对(0)</a></div><span id="comment_3282011_avatar" style="display:none;">http://pic.cnblogs.com/face/591421/20151014151042.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3291036,'35JAM0C56ZNrMeX0GPyWJ7nfGSuWFCXSpjblGBR1c02yMlZQm7g/0Q==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3291036,'35JAM0C56ZNrMeX0GPyWJ7nfGSuWFCXSpjblGBR1c02yMlZQm7g/0Q==')">引用</a></span>
				</div>
				<a href="#3291036" class="layer">#26楼</a><a name="3291036" id="comment_anchor_3291036"></a>  <span class="comment_date">2015-10-23 19:52</span> <a id="a_comment_author_3291036" href="http://www.cnblogs.com/moonbow/" target="_blank">Moonbow</a> <a href="http://msg.cnblogs.com/send/Moonbow" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3291036" class="blog_comment_body">当看到抽象工厂方法时， 发现对抽象工厂的讲解有误。 讲解的是 工厂方法模式。楼主核实一下， 勿误导新人。</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3291036,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3291036,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3298368,'v2YTEfB7T7IzBNNyyRzmmBgEq0364CYhdoJnvoZE9O9MMXvqw/bwPg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3298368,'v2YTEfB7T7IzBNNyyRzmmBgEq0364CYhdoJnvoZE9O9MMXvqw/bwPg==')">引用</a></span>
				</div>
				<a href="#3298368" class="layer">#27楼</a><a name="3298368" id="comment_anchor_3298368"></a>  <span class="comment_date">2015-11-03 23:11</span> <a id="a_comment_author_3298368" href="http://home.cnblogs.com/u/831837/" target="_blank">菠萝晓雪</a> <a href="http://msg.cnblogs.com/send/%E8%8F%A0%E8%90%9D%E6%99%93%E9%9B%AA" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3298368" class="blog_comment_body">赞一个</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3298368,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3298368,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3307287,'4kgR1kFj83VlAME7kPbBc7+Phj8HW60XaODOjA/qMUEviWXsI0v5Fw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3307287,'4kgR1kFj83VlAME7kPbBc7+Phj8HW60XaODOjA/qMUEviWXsI0v5Fw==')">引用</a></span>
				</div>
				<a href="#3307287" class="layer">#28楼</a><a name="3307287" id="comment_anchor_3307287"></a>  <span class="comment_date">2015-11-16 12:53</span> <a id="a_comment_author_3307287" href="http://www.cnblogs.com/hhacc/" target="_blank">Crazy猫咪</a> <a href="http://msg.cnblogs.com/send/Crazy%E7%8C%AB%E5%92%AA" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3307287" class="blog_comment_body">好好学习下了，谢谢分享</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3307287,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3307287,'Bury',this)">反对(0)</a></div><span id="comment_3307287_avatar" style="display:none;">http://pic.cnblogs.com/face/838008/20151116091250.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3319185,'zMJ8jvUKua1bdloqM/pJ52ojJuC/acmcRASQxDSSKBrwRw5S4RwqOw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3319185,'zMJ8jvUKua1bdloqM/pJ52ojJuC/acmcRASQxDSSKBrwRw5S4RwqOw==')">引用</a></span>
				</div>
				<a href="#3319185" class="layer">#29楼</a><a name="3319185" id="comment_anchor_3319185"></a>  <span class="comment_date">2015-12-02 17:28</span> <a id="a_comment_author_3319185" href="http://www.cnblogs.com/ele-oy/" target="_blank">1的哲学</a> <a href="http://msg.cnblogs.com/send/1%E7%9A%84%E5%93%B2%E5%AD%A6" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3319185" class="blog_comment_body">中介者的例子没有体现出类和类之间的耦合性，所以中间件几乎没必要。</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3319185,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3319185,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3328510,'ZqiFZbMvn9JQcoEbTXf2lNphjfhpIi40lgzq3J1+0KwhsaS5XhQKzg==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3328510,'ZqiFZbMvn9JQcoEbTXf2lNphjfhpIi40lgzq3J1+0KwhsaS5XhQKzg==')">引用</a></span>
				</div>
				<a href="#3328510" class="layer">#30楼</a><a name="3328510" id="comment_anchor_3328510"></a>  <span class="comment_date">2015-12-16 22:10</span> <a id="a_comment_author_3328510" href="http://www.cnblogs.com/d392110851/" target="_blank">un-known</a> <a href="http://msg.cnblogs.com/send/un-known" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3328510" class="blog_comment_body">好像还有一种 调停者模式，是这一块的吗？ 请赐教</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3328510,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3328510,'Bury',this)">反对(0)</a></div><span id="comment_3328510_avatar" style="display:none;">http://pic.cnblogs.com/face/774691/20150617105951.png</span>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3336557,'sZIGhtJvYDkZRIExO+k5PRNKKOnptBa5wOh8hbOGX79f739J5B0HKw==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3336557,'sZIGhtJvYDkZRIExO+k5PRNKKOnptBa5wOh8hbOGX79f739J5B0HKw==')">引用</a></span>
				</div>
				<a href="#3336557" class="layer">#31楼</a><a name="3336557" id="comment_anchor_3336557"></a>  <span class="comment_date">2015-12-28 18:57</span> <a id="a_comment_author_3336557" href="http://home.cnblogs.com/u/868084/" target="_blank">Dwyane-Wevil</a> <a href="http://msg.cnblogs.com/send/Dwyane-Wevil" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3336557" class="blog_comment_body">不错，讲的很好啊~</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3336557,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3336557,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	
		<div class="feedbackItem">
			<div class="feedbackListSubtitle">
				<div class="feedbackManage">
					&nbsp;&nbsp;<span class="comment_actions"><a href="javascript:void(0);" onclick="return ReplyComment(3347288,'Tb/kzwexplSiIlR6Zj7NVbSMxN4Mi5f9FZtSoCRjd3tfBTWP8vbp4A==')">回复</a><a href="javascript:void(0);" onclick="return QuoteComment(3347288,'Tb/kzwexplSiIlR6Zj7NVbSMxN4Mi5f9FZtSoCRjd3tfBTWP8vbp4A==')">引用</a></span>
				</div>
				<a href="#3347288" class="layer">#32楼</a><a name="3347288" id="comment_anchor_3347288"></a><span id="comment-maxId" style="display:none;">3347288</span><span id="comment-maxDate" style="display:none;">2016/1/13 22:44:04</span>  <span class="comment_date">2016-01-13 22:44</span> <a id="a_comment_author_3347288" href="http://home.cnblogs.com/u/862235/" target="_blank">潇潇听不懂缠绵</a> <a href="http://msg.cnblogs.com/send/%E6%BD%87%E6%BD%87%E5%90%AC%E4%B8%8D%E6%87%82%E7%BC%A0%E7%BB%B5" title="发送站内短消息" class="sendMsg2This">&nbsp;</a>
			</div>
			<div class="feedbackCon">
				<div id="comment_body_3347288" class="blog_comment_body">我能说你写的很多代码，并没有阐述清楚模式的概念</div><div class="comment_vote"><a href="javascript:void(0);" class="comment_digg" onclick="return voteComment(3347288,'Digg',this)">支持(0)</a><a href="javascript:void(0);" class="comment_bury" onclick="return voteComment(3347288,'Bury',this)">反对(0)</a></div>
			</div>
		</div>
	<div id="comments_pager_bottom"></div></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"><div id="commentform_title">发表评论</div>
<span id="tip_comment" style="color:Red"></span>
<p>
昵称：<input id="tbCommentAuthor" class="author" disabled="disabled" size="50" value="Zack86" type="text">
</p>
<div class="commentbox_main">
<div class="commentbox_title">
<div class="commentbox_title_left">评论内容：</div>
<div class="commentbox_title_right">
<img id="ubb_quote" class="comment_icon" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/quote.gif" alt="引用" title="添加引用" onclick="insertUBB('tbCommentBody','quote')">
<img id="ubb_bold" class="comment_icon" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/b.png" alt="粗体" title="添加粗体" onclick="insertUBB('tbCommentBody','b')">
<img id="ubb_url" class="comment_icon" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/lk.png" alt="链接" title="添加链接" onclick="insertUbbUrl('tbCommentBody')">
<img id="ubb_indent" class="comment_icon" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/indent.png" alt="缩进" title="添加首行缩进" onclick="insertIndent('tbCommentBody')">
<img id="ubb_code" class="comment_icon" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/InsertCode.gif" alt="代码" title="添加代码" onclick="insertUbbCode()">
<img id="ubb_img" class="comment_icon" src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/img.gif" alt="图片" title="上传图片" onclick="OpenImageUploadWindow();">
</div>
</div>
<div class="clear"></div>
<textarea id="tbCommentBody" class="comment_textarea"></textarea>
</div>
<p id="commentbox_opt">
<input id="btn_comment_submit" class="comment_btn" value="提交评论" type="button">
<span id="span_comment_canceledit" style="display:none"><a href="javascript:void(0);" onclick="return CancelCommentEdit()">不改了</a></span>
<a href="javascript:void(0);" onclick="return logout();">注销</a>
        <a id="commentbox_opt_sub" href="javascript:void(0);" title="订阅后有新评论时会邮件通知您" onclick="commentManager.Subscribe()">订阅评论</a>
</p>
<div id="tip_comment2" style="color:Red"></div>
<p>
[Ctrl+Enter快捷键提交]
</p>
<div style="display:none">
<span id="comment_edit_id"></span><span id="span_parentcomment_id"></span>
<span id="span_parent_id"></span>
<span id="span_comment_replyto"></span>
<span id="span_comment_posted"></span>
</div>
</div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="ad_t2"><a href="http://www.ucancode.com/index.htm" target="_blank">【推荐】50万行VC++源码: 大型组态工控、电力仿真CAD与GIS源码库</a><br><a href="http://click.aliyun.com/m/3037/" target="_blank">【阿里云SSD云盘】速度行业领先</a><br></div>
<div id="opt_under_post"></div>
<div id="ad_c1" class="c_ad_block"><a href="http://job.cnblogs.com/offer/51018/" target="_blank"><img src="Java%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%8423%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%28%E8%BD%AC%29%20-%20maowang%20-%20%E5%8D%9A%E5%AE%A2%E5%9B%AD_files/35695-20160215151750532-1876432241.png" alt="招聘ASP.NET 5开发工程师" title="招聘ASP.NET 5开发工程师" width="300" height="250"></a></div>
<div id="under_post_news"><div class="itnews c_ad_block"><b>最新IT新闻</b>:<br> ·  <a href="http://news.cnblogs.com/n/539040/" target="_blank">Windows Store或将成PC游戏的重要战场</a><br> ·  <a href="http://news.cnblogs.com/n/539039/" target="_blank">小岛秀夫开YouTube频道 3天订阅超8万</a><br> ·  <a href="http://news.cnblogs.com/n/539038/" target="_blank">PSVR领导人离职 开创属于自己的VR事业</a><br> ·  <a href="http://news.cnblogs.com/n/539037/" target="_blank">五天被苹果推2555次：解谜手游《_PRISM》</a><br> ·  <a href="http://news.cnblogs.com/n/539036/" target="_blank">新型Android木马盗取银行账户并抹除手机 查杀率低</a><br>» <a href="http://news.cnblogs.com/" title="IT新闻" target="_blank">更多新闻...</a></div></div>
<div id="under_post_kb"><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章</b>:<br><div id="kb_recent"> ·  <a href="http://kb.cnblogs.com/page/536332/" target="_blank">学习新东西的唯一方法</a><br> ·  <a href="http://kb.cnblogs.com/page/536714/" target="_blank">关于烂代码的那些事（下）</a><br> ·  <a href="http://kb.cnblogs.com/page/538102/" target="_blank">每个架构师都应该研究下康威定律</a><br> ·  <a href="http://kb.cnblogs.com/page/537914/" target="_blank">消息队列（Message Queue）基本概念</a><br> ·  <a href="http://kb.cnblogs.com/page/536779/" target="_blank">编程每一天（Write Code Every Day）</a><br></div>» <a href="http://kb.cnblogs.com/" target="_blank">更多知识库文章...</a></div></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);    
});
</script>
</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"><div id="profile_block">昵称：<a href="http://home.cnblogs.com/u/maowang1991/">maowang</a><br>园龄：<a href="http://home.cnblogs.com/u/maowang1991/" title="入园时间：2010-12-03">5年2个月</a><br>粉丝：<a href="http://home.cnblogs.com/u/maowang1991/followers/">196</a><br>关注：<a href="http://home.cnblogs.com/u/maowang1991/followees/">12</a><div id="p_b_follow"><a href="javascript:void(0);" onclick="cnblogs.UserManager.FollowBlogger('a233be40-97fe-df11-ac81-842b2b196315')">+加关注</a></div></div></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style=""><table id="blogCalendar" class="Cal" title="Calendar" cellpadding="0" cellspacing="0">
	<tbody><tr><td colspan="7"><table class="CalTitle" cellspacing="0">
		<tbody><tr><td class="CalNextPrev"><a href="javascript:void(0);" onclick="loadBlogCalendar('2013/03/01');return false;">&lt;</a></td><td align="center">2013年4月</td><td class="CalNextPrev" align="right"><a href="javascript:void(0);" onclick="loadBlogCalendar('2013/05/01');return false;">&gt;</a></td></tr>
	</tbody></table></td></tr><tr><th class="CalDayHeader" abbr="日" scope="col" align="center">日</th><th class="CalDayHeader" abbr="一" scope="col" align="center">一</th><th class="CalDayHeader" abbr="二" scope="col" align="center">二</th><th class="CalDayHeader" abbr="三" scope="col" align="center">三</th><th class="CalDayHeader" abbr="四" scope="col" align="center">四</th><th class="CalDayHeader" abbr="五" scope="col" align="center">五</th><th class="CalDayHeader" abbr="六" scope="col" align="center">六</th></tr><tr><td class="CalOtherMonthDay" align="center">31</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td class="CalWeekendDay" align="center">6</td></tr><tr><td class="CalWeekendDay" align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">10</td><td align="center">11</td><td align="center">12</td><td class="CalWeekendDay" align="center">13</td></tr><tr><td class="CalWeekendDay" align="center">14</td><td align="center"><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15.html"><u>15</u></a></td><td align="center"><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/16.html"><u>16</u></a></td><td align="center">17</td><td align="center"><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/18.html"><u>18</u></a></td><td align="center">19</td><td class="CalWeekendDay" align="center">20</td></tr><tr><td class="CalWeekendDay" align="center">21</td><td align="center">22</td><td align="center"><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/23.html"><u>23</u></a></td><td align="center">24</td><td align="center">25</td><td align="center">26</td><td class="CalWeekendDay" align="center">27</td></tr><tr><td class="CalWeekendDay" align="center">28</td><td align="center">29</td><td align="center">30</td><td class="CalOtherMonthDay" align="center">1</td><td class="CalOtherMonthDay" align="center">2</td><td class="CalOtherMonthDay" align="center">3</td><td class="CalOtherMonthDay" align="center">4</td></tr><tr><td class="CalOtherMonthDay" align="center">5</td><td class="CalOtherMonthDay" align="center">6</td><td class="CalOtherMonthDay" align="center">7</td><td class="CalOtherMonthDay" align="center">8</td><td class="CalOtherMonthDay" align="center">9</td><td class="CalOtherMonthDay" align="center">10</td><td class="CalOtherMonthDay" align="center">11</td></tr>
</tbody></table></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"><div id="sidebar_search" class="sidebar-block">
<div id="sidebar_search" class="mySearch">
<h3 class="catListTitle">搜索</h3>
<div id="sidebar_search_box">
<div id="widget_my_zzk" class="div_my_zzk"><input id="q" onkeydown="return zzk_go_enter(event);" class="input_my_zzk" type="text">&nbsp;<input onclick="zzk_go()" value="找找看" id="btnZzk" class="btn_my_zzk" type="button"></div>
<div id="widget_my_google" class="div_my_zzk"><input name="google_q" id="google_q" onkeydown="return google_go_enter(event)" class="input_my_zzk" type="text">&nbsp;<input onclick="google_go()" value="谷歌搜索" class="btn_my_zzk" type="button"></div>
</div>
</div>

</div><div id="sidebar_shortcut" class="sidebar-block">
<div class="catListLink">
<h3 class="catListTitle">常用链接</h3>
<ul>
<li><a href="http://www.cnblogs.com/maowang1991/p/" title="我的博客的随笔列表">我的随笔</a></li><li><a href="http://www.cnblogs.com/maowang1991/MyComments.html" title="我发表过的评论列表">我的评论</a></li><li><a href="http://www.cnblogs.com/maowang1991/OtherPosts.html" title="我评论过的随笔列表">我的参与</a></li><li><a href="http://www.cnblogs.com/maowang1991/RecentComments.html" title="我的博客的评论列表">最新评论</a></li><li><a href="http://www.cnblogs.com/maowang1991/tag/" title="我的博客的标签列表">我的标签</a></li>
<li><a id="itemListLink" onclick="this.blur();WarpClass('itemListLink', 'itemListLin_con');return false;" href="#">更多链接</a></li>
</ul>
<div id="itemListLin_con" style="display:none;">
<ul>

</ul>
</div>
</div></div><div id="sidebar_toptags" class="sidebar-block"></div><div id="sidebar_categories">
<div id="sidebar_postcategory" class="catListPostCategory sidebar-block">
<h3 class="catListTitle">随笔分类</h3>

<ul>

<li><a id="CatList_LinkList_0_Link_0" href="http://www.cnblogs.com/maowang1991/category/497081.html">.NET(5)</a> </li>

<li><a id="CatList_LinkList_0_Link_1" href="http://www.cnblogs.com/maowang1991/category/556229.html">ALGORITHM(16)</a> </li>

<li><a id="CatList_LinkList_0_Link_2" href="http://www.cnblogs.com/maowang1991/category/435650.html">C/C++(19)</a> </li>

<li><a id="CatList_LinkList_0_Link_3" href="http://www.cnblogs.com/maowang1991/category/441518.html">JAVA(7)</a> </li>

<li><a id="CatList_LinkList_0_Link_4" href="http://www.cnblogs.com/maowang1991/category/471980.html">LINUX(30)</a> </li>

<li><a id="CatList_LinkList_0_Link_5" href="http://www.cnblogs.com/maowang1991/category/471009.html">NETWORK(11)</a> </li>

<li><a id="CatList_LinkList_0_Link_6" href="http://www.cnblogs.com/maowang1991/category/486958.html">OTHERS(14)</a> </li>

<li><a id="CatList_LinkList_0_Link_7" href="http://www.cnblogs.com/maowang1991/category/486952.html">THINK(18)</a> </li>

<li><a id="CatList_LinkList_0_Link_8" href="http://www.cnblogs.com/maowang1991/category/512467.html">VC(6)</a> </li>

</ul>

</div>

<div id="sidebar_postarchive" class="catListPostArchive sidebar-block">
<h3 class="catListTitle">随笔档案</h3>

<ul>

<li><a id="CatList_LinkList_1_Link_0" href="http://www.cnblogs.com/maowang1991/archive/2014/12.html">2014年12月 (1)</a> </li>

<li><a id="CatList_LinkList_1_Link_1" href="http://www.cnblogs.com/maowang1991/archive/2014/08.html">2014年8月 (1)</a> </li>

<li><a id="CatList_LinkList_1_Link_2" href="http://www.cnblogs.com/maowang1991/archive/2014/04.html">2014年4月 (4)</a> </li>

<li><a id="CatList_LinkList_1_Link_3" href="http://www.cnblogs.com/maowang1991/archive/2014/02.html">2014年2月 (40)</a> </li>

<li><a id="CatList_LinkList_1_Link_4" href="http://www.cnblogs.com/maowang1991/archive/2013/11.html">2013年11月 (19)</a> </li>

<li><a id="CatList_LinkList_1_Link_5" href="http://www.cnblogs.com/maowang1991/archive/2013/10.html">2013年10月 (5)</a> </li>

<li><a id="CatList_LinkList_1_Link_6" href="http://www.cnblogs.com/maowang1991/archive/2013/08.html">2013年8月 (9)</a> </li>

<li><a id="CatList_LinkList_1_Link_7" href="http://www.cnblogs.com/maowang1991/archive/2013/07.html">2013年7月 (4)</a> </li>

<li><a id="CatList_LinkList_1_Link_8" href="http://www.cnblogs.com/maowang1991/archive/2013/06.html">2013年6月 (4)</a> </li>

<li><a id="CatList_LinkList_1_Link_9" href="http://www.cnblogs.com/maowang1991/archive/2013/05.html">2013年5月 (1)</a> </li>

<li><a id="CatList_LinkList_1_Link_10" href="http://www.cnblogs.com/maowang1991/archive/2013/04.html">2013年4月 (10)</a> </li>

<li><a id="CatList_LinkList_1_Link_11" href="http://www.cnblogs.com/maowang1991/archive/2013/02.html">2013年2月 (2)</a> </li>

<li><a id="CatList_LinkList_1_Link_12" href="http://www.cnblogs.com/maowang1991/archive/2013/01.html">2013年1月 (3)</a> </li>

<li><a id="CatList_LinkList_1_Link_13" href="http://www.cnblogs.com/maowang1991/archive/2012/12.html">2012年12月 (22)</a> </li>

</ul>

</div>

</div><div id="sidebar_recentcomments" class="sidebar-block"><div id="recent_comments_wrap">
<div class="catListComment">
<h3 class="catListTitle">最新评论</h3>

	<div id="RecentCommentsBlock"><ul>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html#3347288">1. Re:Java开发中的23种设计模式详解(转)</a></li>
    <li class="recent_comment_body">我能说你写的很多代码，并没有阐述清楚模式的概念</li>
    <li class="recent_comment_author">--潇潇听不懂缠绵</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/maowang1991/p/3572377.html#3346735">2. Re:程序员学习能力提升三要素</a></li>
    <li class="recent_comment_body">写得好!受益了!</li>
    <li class="recent_comment_author">--精灵骑士</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/maowang1991/p/3572409.html#3346729">3. Re:不想装逼的傻逼不是好二逼</a></li>
    <li class="recent_comment_body">看完了他吐的这么多槽点,我没看到想表达什么意思.</li>
    <li class="recent_comment_author">--精灵骑士</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html#3336557">4. Re:Java开发中的23种设计模式详解(转)</a></li>
    <li class="recent_comment_body">不错，讲的很好啊~</li>
    <li class="recent_comment_author">--Dwyane-Wevil</li>
    <li class="recent_comment_title"><a href="http://www.cnblogs.com/maowang1991/p/3364982.html#3336057">5. Re:windows下使用C#获取特定进程网络流量</a></li>
    <li class="recent_comment_body">mark</li>
    <li class="recent_comment_author">--胖子黎</li>
</ul>
</div>
</div>
</div></div><div id="sidebar_topviewedposts" class="sidebar-block"><div id="topview_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">阅读排行榜</h3>
	<div id="TopViewPostsBlock"><ul><li><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html">1. Java开发中的23种设计模式详解(转)(197836)</a></li><li><a href="http://www.cnblogs.com/maowang1991/p/3362704.html">2. Debian 7 安装配置总结(29737)</a></li><li><a href="http://www.cnblogs.com/maowang1991/archive/2013/02/05/2893142.html">3. Eclipse环境下配置spket中ExtJS提示(15353)</a></li><li><a href="http://www.cnblogs.com/maowang1991/p/3371640.html">4. 关于vim复制剪贴粘贴命令的总结(10552)</a></li><li><a href="http://www.cnblogs.com/maowang1991/archive/2012/12/28/2837279.html">5. 第一个Java程序，简单的打开图片并显示在面板上(9809)</a></li></ul></div>
</div>
</div></div><div id="sidebar_topcommentedposts" class="sidebar-block"><div id="topfeedback_posts_wrap">
<div class="catListFeedback">
<h3 class="catListTitle">评论排行榜</h3>
	<div id="TopFeedbackPostsBlock"><ul><li><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html">1. Java开发中的23种设计模式详解(转)(32)</a></li><li><a href="http://www.cnblogs.com/maowang1991/p/3290321.html">2. C++学习笔记（原创）(18)</a></li><li><a href="http://www.cnblogs.com/maowang1991/archive/2013/02/05/2893142.html">3. Eclipse环境下配置spket中ExtJS提示(12)</a></li><li><a href="http://www.cnblogs.com/maowang1991/p/3364982.html">4. windows下使用C#获取特定进程网络流量(6)</a></li><li><a href="http://www.cnblogs.com/maowang1991/archive/2013/06/06/3121491.html">5. 去百度，还是去创新工厂(4)</a></li></ul></div>
</div>
</div></div><div id="sidebar_topdiggedposts" class="sidebar-block"><div id="topdigg_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">推荐排行榜</h3>
<div id="TopDiggPostsBlock"><ul><li><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html">1. Java开发中的23种设计模式详解(转)(65)</a></li><li><a href="http://www.cnblogs.com/maowang1991/archive/2013/02/05/2893142.html">2. Eclipse环境下配置spket中ExtJS提示(7)</a></li><li><a href="http://www.cnblogs.com/maowang1991/p/3364982.html">3. windows下使用C#获取特定进程网络流量(5)</a></li><li><a href="http://www.cnblogs.com/maowang1991/p/3290321.html">4. C++学习笔记（原创）(5)</a></li><li><a href="http://www.cnblogs.com/maowang1991/p/3285983.html">5. C#获取特定进程CPU和内存使用率(3)</a></li></ul></div>
</div></div></div></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright ©2016 maowang
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


</body></html>